<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>CodeCompletion.io</title><description>We are a group of developers and educators specializing in Apple Platform development, here to try something new.

New content coming out every week.</description><link>https://codecompletion.io</link><language>en</language><lastBuildDate>Sat, 8 May 2021 19:12:15 +0000</lastBuildDate><pubDate>Sat, 8 May 2021 19:12:15 +0000</pubDate><ttl>250</ttl><atom:link href="https://codecompletion.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-27</guid><title>Episode 27: Spring Loaded Zoom Zoom</title><description>We discuss Apple's Spring Loaded event announcements.</description><link>https://codecompletion.io/episodes/2021/ep-27</link><pubDate>Tue, 27 Apr 2021 04:45:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 26! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://codecompletion.io/jointheclub">Join</a> the Code Completion Club at <a href="https://codecompletion.io/jointheclub">https://codecompletion.io/jointheclub</a>!</li><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://lighthouse16.com/quiet/">Quiet</a> by <a href="https://twitter.com/lighthouse16_hq">Peter Cammeraat</a>,</li><li><a href="https://apps.apple.com/us/app/id1441959317?ls=1">Mezzanine Theater Diary</a> by <a href="https://twitter.com/BenPackard">Ben Packard</a>, and</li><li><a href="https://apps.apple.com/us/app/home-inventory/id413564952?mt=12">Home Inventory</a> by <a href="https://twitter.com/DianeRHamilton">Diane Hamilton</a>.</li></ul></li></ul><ul><li>We review Apple's Spring Loaded event:<ul><li>New iMacs</li><li>Potential future iMac Pro</li><li>Where Apple will take the M1/M2/M1S/M1X</li><li>AirTags</li><li>New iPad Pros<ul><li><a href="https://www.youtube.com/watch?v=_fw_ptyy9GM">5G</a></li></ul></li><li>The new Apple TV 4K</li><li>Mac mini bumped with 10Gbase-T ethernet option</li><li>Lavender iPhone 12</li><li>Podcasting subscriptions</li><li>Apple Card Family and shared credit</li></ul></li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>In which order would Swift prioritize the following overloaded methods??</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
</code><code><span class="splashkeyword">func</span> processValue&lt;T: <span class="splashtype">BinaryFloatingPoint</span>&gt;(<span class="splashkeyword">_</span> value: <span class="splashtype">T</span>) <span class="splashcomment">// 1</span>
<span class="splashkeyword">func</span> processValue&lt;T: <span class="splashtype">BinaryFloatingPoint</span>&amp;<span class="splashtype">Decodable</span>&gt;(<span class="splashkeyword">_</span> value: <span class="splashtype">T</span>) <span class="splashcomment">// 2</span>
<span class="splashkeyword">func</span> processValue&lt;T: <span class="splashtype">Decodable</span>&gt;(<span class="splashkeyword">_</span> value: <span class="splashtype">T</span>) <span class="splashcomment">// 3</span>
<span class="splashkeyword">func</span> processValue(<span class="splashkeyword">_</span> value: <span class="splashtype">Double</span>) <span class="splashcomment">// 4</span>
<span class="splashkeyword">func</span> processValue&lt;T: <span class="splashtype">Numeric</span>&gt;(<span class="splashkeyword">_</span> value: <span class="splashtype">T</span>) <span class="splashcomment">// 5</span>

<span class="splashkeyword">let</span> value: <span class="splashtype">Double</span> = <span class="splashnumber">3.14</span>
<span class="splashcall">processValue</span>(value) <span class="splashcomment">// Which order would the swift compiler rank these methods in?</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Ultra-wideband!</p><ol><li>Ultra-wideband, or UWB for short, is a specific technology for short-range, low-energy, high-bandwidth communication over a large portion of the radio spectrum.</li></ol><ol start="2"><li>Apple‚Äôs U1 chip can accurately position another U1 device within an omnidirectional field of view as long as the devices are within 100 feet of each other.</li></ol><ol start="3"><li>Formerly known as pulse radio, UWB works by generating radio energy at specific time intervals over a large bandwidth, where the polarity and timing of the pulse determine the data being transmitted.</li></ol><ol start="4"><li>Despite these devices not having a U1 chip, AirTags are compatible with iPhone SE, iPhone 6s or later so long as they are running iOS 14.5 or later.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando went first, followed by Ben. Let's see how they did!</p>

<blockquote>4. Despite these devices not having a U1 chip, AirTags are compatible with iPhone SE, iPhone 6s or later so long as they are running iOS 14.5 or later.</blockquote>

<p>Dimitri basically spoiled this one mid episode, making this an easy <em>code completion</em>!</p>

<blockquote>1. Ultra-wideband, or UWB for short, is a specific technology for short-range, low-energy, high-bandwidth communication over a large portion of the radio spectrum.</blockquote>

<p>No one was led astray by this basic definition, since it was also a <em>code completion</em>!</p>

<blockquote>2. Apple‚Äôs U1 chip can accurately position another U1 device within an omnidirectional field of view as long as the devices are within 100 feet of each other.</blockquote>

<p>Everyone trusted this to be fact, despite it being the <strong>compiler error</strong> all along! The U1 can't have an omnidirectional field of view, otherwise it wouldn't be able to tell where another device is! Not to mention it is only usable over much shorter distances‚Ä¶</p>

<p>Which means‚Ä¶</p>

<blockquote>3. Formerly known as pulse radio, UWB works by generating radio energy at specific time intervals over a large bandwidth, where the polarity and timing of the pulse determine the data being transmitted.</blockquote>

<p>Both Fernando and Ben were led astray by such <em>simple</em> physics, because this one was a plain old <em>code completion</em>!</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Ultra-wideband">Ultra-wideband on Wikipedia</a></li>
<li><a href="https://www.apple.com/shop/buy-airtag/airtag">AirTag requirements</a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by Swiftly Built's <a href="https://www.eventbrite.com/e/swiftly-built-advanced-data-display-tickets-147152558263?aff=CodeCompletion">Advanced Data Display course</a>. Buy your ticket now on Eventbrite for one month of live iOS instruction starting on May 1st!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-26</guid><title>Episode 26: Building a Cable Museum</title><description>We discuss what we do with old tech, Apple's upcoming Spring Loaded event, and what we really want out of iPads.</description><link>https://codecompletion.io/episodes/2021/ep-26</link><pubDate>Mon, 19 Apr 2021 17:15:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 26! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://codecompletion.io/jointheclub">Join</a> the Code Completion Club at <a href="https://codecompletion.io/jointheclub">https://codecompletion.io/jointheclub</a>!</li><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://dronetrails.app">Drone Trails</a> by <a href="https://twitter.com/soupyn00dles">Rahul Ravindran</a>,</li><li><a href="https://newsbite.app">Newsbite</a> by <a href="https://twitter.com/chrisajenkins">Chris Jenkins</a>, and</li><li><a href="http://www.pkclsoft.com/wp/app/world-of-hex/">World of Hex</a> by <a href="https://twitter.com/PKCLsoft">Peter Easdown</a>.</li></ul></li></ul><ul><li>Dimitri's trade-in experience.</li><li>What to do with old devices and boxes.</li><li>Our predictions for this week's Spring Loaded Apple Event.</li><li>The need for better iPad stories rather than faster iPads.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: HDR Video!</p><ol><li>High dynamic range video expands on standard dynamic range by increasing not only the luminance, but also the bit depth and color volume.</li></ol><ol start="2"><li>Standard dynamic range video is defined according to a maximum luminance of 100 nits, limited by the capabilities of CRT-based display technology.</li></ol><ol start="3"><li>The Ultra HD Alliance defines a display as being HDR-capable only if it is able to reach a limited peak brightness of at least 1000 nits.</li></ol><ol start="4"><li>An HDR display is capable of displaying content mastered for any maximum brightness thanks to a technique called tone mapping.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Spencer went first, followed by Ben. Let's see how they did!</p>

<blockquote>1. High dynamic range video expands on standard dynamic range by increasing not only the luminance, but also the bit depth and color volume.</blockquote>

<p>Ben and Spencer believed this to be a <em>code completion</em>, which it was!</p>

<blockquote>2. Standard dynamic range video is defined according to a maximum luminance of 100 nits, limited by the capabilities of CRT-based display technology.</blockquote>

<p>No one was led astray by this, which is unfortunate (for Dimitri) since it was also a <em>code completion</em>!</p>

<blockquote>3. The Ultra HD Alliance defines a display as being HDR-capable only if it is able to reach a limited peak brightness of at least 1000 nits.</blockquote>

<p>Everyone trusted this to be fact, despite it being the <strong>compiler error</strong> all along! Turns out the requirements are a lot lower than that, or else most displays would not be HDR capable at all!</p>

<p>Which means‚Ä¶</p>

<blockquote>4. An HDR display is capable of displaying content mastered for any maximum brightness thanks to a technique called tone mapping.</blockquote>

<p>Both Spencer and Ben were led astray by the terminology, because this one was a plain old <em>code completion</em>!</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/High_dynamic_range#Visual">High Dynamic Range on Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Standard-dynamic-range_video">Standard Dynamic Range on Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/High-dynamic-range_video">High Dynamic Range Video on Wikipedia</a></li>
<li><a href="https://gizmodo.com/how-dolby-vision-works-and-how-it-could-revolutionize-1594894563 ">How Dolby Vision Works, and How It Could Revolutionize TVs Forever</a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by Swiftly Built's <a href="https://www.eventbrite.com/e/swiftly-built-advanced-data-display-tickets-147152558263?aff=CodeCompletion">Advanced Data Display course</a>. Buy your ticket now on Eventbrite for one month of live iOS instruction starting on May 1st!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-25</guid><title>Episode 25: Subjective-C</title><description>We discuss the relevance of Objective-C for new developers.</description><link>https://codecompletion.io/episodes/2021/ep-25</link><pubDate>Thu, 15 Apr 2021 21:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 25! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://codecompletion.io/jointheclub">Join</a> the Code Completion Club at <a href="https://codecompletion.io/jointheclub">https://codecompletion.io/jointheclub</a>!</li><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://twitter.com/boundaudio">Bound Audio</a> by <a href="https://twitter.com/timbueno">Tim Bueno</a>,</li><li><a href="https://moneycoach.ai">MoneyCoach</a> by <a href="https://twitter.com/PerjanDuro">Perjan Duro</a>, and</li><li><a href="https://apps.apple.com/us/app/attendance2/id536206472">Attendance2</a> by <a href="https://twitter.com/davereed">Dave Reed</a>.</li></ul></li></ul><ul><li>The relevance of Objective-C for new and existing developers.</li><li>The complexity of Swift.</li><li>SwiftUI vs UIKit.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Can you spot and fix the memory leak?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
</code><code><span class="splashkeyword">class</span> DelayedTask {
    <span class="splashkeyword">var</span> complete = <span class="splashkeyword">false
    var</span> task: <span class="splashtype">DispatchWorkItem</span>?
    
    <span class="splashkeyword">func</span> configure() {
        task = <span class="splashtype">DispatchWorkItem</span> {
            <span class="splashtype">DispatchQueue</span>.<span class="splashproperty">main</span>.<span class="splashcall">asyncAfter</span>(.<span class="splashcall">now</span>() + <span class="splashnumber">5</span>) { [<span class="splashkeyword">weak self</span>] <span class="splashkeyword">in
                self</span>?.<span class="splashproperty">complete</span> = <span class="splashkeyword">true</span>
            }
        }
    }
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Objective-C ARC!</p><ol><li>Much like Swift, ARC can be configured to operate on CoreFoundation types in Objective-C code using the option -f-objc-arc-cftypes at compile time.</li></ol><ol start="2"><li>Automatic Reference Counting was originally called Automatic Retain Release, abbreviated as ARR, and was ultimately changed to ARC before release.</li></ol><ol start="3"><li>Unlike with ARC, Objective-C Garbage Collection required users to implement -finalize rather than -dealloc for object cleanup.</li></ol><ol start="4"><li>Although they were introduced with ARC, @autoreleasepool blocks can also be used in code where ARC is disabled since it offers a performance improvement.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando went first, followed by Ben and Spencer. Let's see how they did!</p>

<blockquote>4. Although they were introduced with ARC, @autoreleasepool blocks can also be used in code where ARC is disabled since it offers a performance improvement.</blockquote>

<p>Ben and Spencer believed this to be true, but Fernando thought it must be wrong‚Ä¶ which he was wrong to think, because it was a <em>code completion</em>!</p>

<blockquote>3. Unlike with ARC, Objective-C Garbage Collection required users to implement -finalize rather than -dealloc for object cleanup.</blockquote>

<p>Everyone thought this was plausible, since it was also a <em>code completion</em>!</p>

<blockquote>2. Automatic Reference Counting was originally called Automatic Retain Release, abbreviated as ARR, and was ultimately changed to ARC before release.</blockquote>

<p>No one was tricked by the pirate sounding accronym, because it is also a <em>code completion</em>!</p>

<p>Which means‚Ä¶</p>

<blockquote>1. Much like Swift, ARC can be configured to operate on CoreFoundation types in Objective-C code using the option -f-objc-arc-cftypes at compile time.</blockquote>

<p>Both Ben and Spencer trusted their gut, which payed off since this was the <strong>compiler error</strong>! Only Swift got this magical functionality through its C overlay, which Objective-C can't participate in to this day‚Ä¶</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://opensource.apple.com/source/objc4/objc4-493.11/runtime/objc-arr.mm">Objective-C ARR source code</a></li>
<li><a href="https://developer.apple.com/documentation/objectivec/nsobject/1418513-finalize?language=objc"><code>-[NSObject finalize]</code></a></li>
<li><a href="https://developer.apple.com/documentation/foundation/nsautoreleasepool "><code>NSAutoreleasePool</code></a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://twitter.com/UnderdogDevs">Underdog Devs</a>' Spring Into Swift event. Follow <a href="https://twitter.com/UnderdogDevs">@UnderdogDevs</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay tuned for more information about the <a href="https://twitter.com/hashtag/SpringIntoSwift">Spring Into Swift</a> event!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-24</guid><title>Episode 24: Shark Proof Cabling</title><description>We discuss recent rumors about Apple TV, HomeKit, and potential new Macs.</description><link>https://codecompletion.io/episodes/2021/ep-24</link><pubDate>Thu, 1 Apr 2021 16:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 24! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://codecompletion.io/jointheclub">Join</a> the Code Completion Club at <a href="https://codecompletion.io/jointheclub">https://codecompletion.io/jointheclub</a>!</li><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://apps.apple.com/us/app/highlighted-book-highlighter/id1480216009">Highlighted</a> by <a href="https://twitter.com/stuhecdamir">Damir Stuhec</a>,</li><li><a href="https://apps.apple.com/us/app/pro-wrestling-simulator-2021/id1513020607">Pro Wrestling Simulator 2021</a> by <a href="https://twitter.com/j_t_saeed">James Saeed</a>, and</li><li><a href="https://apps.apple.com/app/id1468495939">Replica</a> by <a href="https://twitter.com/martinho_t">Tiago Martinho</a>.</li></ul></li></ul><ul><li>Rumors around Apple TV, HomePod, and future Apple Silicon Macs.</li><li>The state of Siri and HomeKit.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Undersea Cabling!</p><ol><li>A colony of electric eels was responsible in 2013 for disturbing the operation of fiber optic cabling resulting in significant packet loss to the islands of French Polynesia.</li></ol><ol start="2"><li>In 2014, a security camera revealed that sharks were biting undersea fiber optic cabling, presumably attracted to the magnetic field emitted by the high voltage power required for optical repeaters.</li></ol><ol start="3"><li>An undersea cable is technically referred as a submarine communications cable, and unlike the name implies, has little to do with submarines, but the cables were used as early as the 1850‚Äôs with the telegraph.</li></ol><ol start="4"><li>It took more than a year to construct and install the MAREA cable, a 4000 mile cable connecting Spain to the United States, that can transmit up to 200 terabits per second.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Ben went first, followed by Spencer. Let's see how they did!</p>

<blockquote>4. It took more than a year to construct and install the MAREA cable, a 4000 mile cable connecting Spain to the United States, that can transmit up to 200 terabits per second.</blockquote>

<p>Both our completionists believed this to be true, because it was a <em>code completion</em>!</p>

<blockquote>3. An undersea cable is technically referred as a submarine communications cable, and unlike the name implies, has little to do with submarines, but the cables were used as early as the 1850‚Äôs with the telegraph.</blockquote>

<p>Ben had doubts about the long history of submarine communications cables, but this was also a <em>code completion</em>!</p>

<blockquote>2. In 2014, a security camera revealed that sharks were biting undersea fiber optic cabling, presumably attracted to the magnetic field emitted by the high voltage power required for optical repeaters.</blockquote>

<p>Spencer thought they would have thought about sharks eating cables before, but they didn't, since it was also a <em>code completion</em>!</p>

<p>Which means‚Ä¶</p>

<blockquote>1. A colony of electric eels was responsible in 2013 for disturbing the operation of fiber optic cabling resulting in significant packet loss to the islands of French Polynesia.</blockquote>

<p>That's right, the <strong>compiler error</strong>! Turns out electric eels were impacted by some undersea cabling, but they never caused such an incident before‚Ä¶</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://www.researchgate.net/publication/230165374_Sub-sea_power_cables_and_migration_behaviour_of_the_European_eel">Sub-sea power cables and migration behaviour of the European eel</a></li>
<li><a href="https://www.theguardian.com/technology/2014/aug/14/google-undersea-fibre-optic-cables-shark-attacks">Shark Attacks on Fiber Optic Cables</a></li>
<li><a href="https://en.wikipedia.org/wiki/Submarine_communications_cable">Submarine communications cable on Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/MAREA">MAREA on Wikipedia</a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-23</guid><title>Episode 23: Fernando will Host Your Backups (* &lt;4TB only)</title><description>We discuss each of our backup strategies, and difficulties managing them.</description><link>https://codecompletion.io/episodes/2021/ep-23</link><pubDate>Tue, 23 Mar 2021 17:10:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 23! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://codecompletion.io/jointheclub">Join</a> the Code Completion Club at <a href="https://codecompletion.io/jointheclub">https://codecompletion.io/jointheclub</a>!</li><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://www.relateios.app">Relate</a> by <a href="https://twitter.com/thesamcoe">Samuel Coe</a>,</li><li><a href="https://github.com/SamusAranX/MinimalMIDIPlayer">MinimalMIDIPlayer</a> by <a href="https://twitter.com/SamusAranX">Peter</a>, and</li><li><a href="https://simonemontalto.com/projects/book-track">Book Track</a> by <a href="https://twitter.com/SimoneMontalto">Simone Montalto</a>.</li></ul></li></ul><ul><li>What we each do for backups.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: RAID!</p><ol><li>RAID exists in 7 standard levels, 0 through 6, all of which implement striping in various configurations, except for RAID 1 which implements a full mirror of the data set instead of using striping.</li></ol><ol start="2"><li>Originally referred to as ‚ÄúRedundant Array of Inexpensive Disks‚Äù, RAID was renamed to ‚ÄúRedundant Array of Independent Disks‚Äù by industry manufacturers.</li></ol><ol start="3"><li>Despite the existence of standardized RAID levels, implementations of those same RAID levels are completely proprietary, and no interoperability between major manufacturers currently exists.</li></ol><ol start="4"><li>A cousin of RAID, MAID or Massive Array of Idle Drives, is an architecture that uses hundreds of drives, where latencies can be very high, but operational costs may be more manageable since not every drive needs to be online at any given time.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Spencer went first, followed by Fernando. Let's see how they did!</p>

<blockquote>4. A cousin of RAID, MAID or Massive Array of Idle Drives, is an architecture that uses hundreds of drives, where latencies can be very high, but operational costs may be more manageable since not every drive needs to be online at any given time.</blockquote>

<p>Fernando wasn't so sure about this one being true, but it was a <em>code completion</em>!</p>

<blockquote>3. Despite the existence of standardized RAID levels, implementations of those same RAID levels are completely proprietary, and no interoperability between major manufacturers currently exists.</blockquote>

<p>Both our completionists believed this, and so did Dimitri! Until he looked into it, because it was the <strong>compiler error</strong>! Turns out the Disk Data Format is a standardized format just for this use case!</p>

<p>Which means‚Ä¶</p>

<blockquote>2. Originally referred to as ‚ÄúRedundant Array of Inexpensive Disks‚Äù, RAID was renamed to ‚ÄúRedundant Array of Independent Disks‚Äù by industry manufacturers.</blockquote>

<p>Both our completionists weren't phased by the odd naming, since it was a <em>code completion</em>.</p>

<blockquote>1. RAID exists in 7 standard levels, 0 through 6, all of which implement striping in various configurations, except for RAID 1 which implements a full mirror of the data set instead of using striping.</blockquote>

<p>Spencer had doubts, but those doubts led him astray, since it was also a <em>code completion</em>!</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/RAID">RAID on Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Standard_RAID_levels">Standard RAID levels on Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Non-RAID_drive_architectures#MAID">MAID on Wikipedia</a></li>
<li><a href="https://www.snia.org/tech_activities/standards/curr_standards/ddf">Disk Data Format Specification</a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://twitter.com/UnderdogDevs">Underdog Devs</a>' Spring Into Swift event. Follow <a href="https://twitter.com/UnderdogDevs">@UnderdogDevs</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay tuned for more information about the <a href="https://twitter.com/hashtag/SpringIntoSwift">Spring Into Swift</a> event!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-22</guid><title>Episode 22: Not a Soapbox</title><description>We discuss Fernando's new course and alternative ways of leveing up as a developer.</description><link>https://codecompletion.io/episodes/2021/ep-22</link><pubDate>Mon, 15 Mar 2021 18:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 22! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://apps.apple.com/us/app/print-to-size/id949490225?ign-mpt=uo%3D4">Print to Size</a> by <a href="https://twitter.com/sebmolines">Seb</a>,</li><li><a href="https://coppiceapp.com">Coppice</a> by <a href="https://twitter.com/pilky">Martin Pilkington</a>, and</li><li><a href="https://tumult.com/hype/">Tumult Hype</a> by <a href="https://twitter.com/jmfd">Jonathan Deutsch</a>.</li></ul></li></ul><ul><li>Fernando's New Course.</li><li>Teaching and Learning iOS Development.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: FireWire!</p><ol><li>FireWire comes in 3 protocol flavors: FireWire 400 over a 4-pin connector, FireWire 600 over a 6-pin connector, and FireWire 800 over a 9-pin connector.</li></ol><ol start="2"><li>The technology behind FireWire, known as IEEE 1394, was not only used in consumer electronics, but also automobiles, military vehicles, and even satellites.</li></ol><ol start="3"><li>FireWire was expected to reach speeds up to 6.4 Gbps over single mode fiber, but development was largely halted after 2010, and fully withdrawn in 2013.</li></ol><ol start="4"><li>Unlike USB where these is a single host to the topology of connected devices, FireWire implements a pure peer-to-peer network, allowing for multiple hosts and devices to share the same bus for communication.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Ben went first, followed by Fernando. Let's see how they did!</p>

<blockquote>4. Unlike USB where these is a single host to the topology of connected devices, FireWire implements a pure peer-to-peer network, allowing for multiple hosts and devices to share the same bus for communication.</blockquote>

<p>Both our completionists trusted this to be fact, which it was since it is a <em>code completion</em>!</p>

<blockquote>2. The technology behind FireWire, known as IEEE 1394, was not only used in consumer electronics, but also automobiles, military vehicles, and even satellites.</blockquote>

<p>Neither of them was tricked by this one either as it was also a <em>code completion</em>!</p>

<blockquote>3. FireWire was expected to reach speeds up to 6.4 Gbps over single mode fiber, but development was largely halted after 2010, and fully withdrawn in 2013.</blockquote>

<p>Ben doubted this one, but was deniged his right to change his mind, since it was a <em>code completion</em>!</p>

<p>Which means‚Ä¶</p>

<blockquote>1. FireWire comes in 3 protocol flavors: FireWire 400 over a 4-pin connector, FireWire 600 over a 6-pin connector, and FireWire 800 over a 9-pin connector.</blockquote>

<p>You guess it, and so did Fernando: the <strong>compiler error</strong>!</p>

<h3>Learn More ‚Üí</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/IEEE_1394">IEEE 1394 on Wikipedia</a></li>
</ul>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://www.jonnybcodes.com">JohnnyB</a>'s Bon Voyage eCommerce App course. Visit <a href="http://bon-voyage.app/course">bon-voyage.app/course</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay up to date with all his courses!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-21</guid><title>Episode 21: I Fear For My Wallet</title><description>We make predictions for Apple products in 2021, and review those that were released last year!</description><link>https://codecompletion.io/episodes/2021/ep-21</link><pubDate>Wed, 24 Feb 2021 17:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 21! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Indie App Spotlight, with three apps for you to check out:<ul><li><a href="https://apps.apple.com/app/thirstic-smart-water-tracker/id1471500028">Thirstic</a> by <a href="https://twitter.com/ersjoh">Johannes Erschbamer</a>,</li><li><a href="https://apps.apple.com/us/app/memorypie/id1071872226">MemoryPie</a> by <a href="https://twitter.com/literalPie">Ben Kindle</a>, and</li><li><a href="https://sparkleapp.com/">Sparkle</a> by <a href="https://twitter.com/dannyturmoils">Daniele Trambusti</a> and <a href="https://twitter.com/duncanwilcox">Duncan Wilcox</a>.</li></ul></li></ul><ul><li>Predictions for 2021.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What built-in way that doesn't require the use of an internet connection can you use to get documentation on many C functions like  <code>malloc()</code>?</blockquote><pre><code class="splashlineNumbers">1
</code><code>void *myQuoteObjectUnquote = <span class="splashcall">malloc</span>(<span class="splashnumber">8</span>);
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Apple releases in 2020!</p><ol><li>March of 2020 saw the release of many new updates, including the Powerbeats: a low cost wired version of the Powerbeats Pro and an upgrade to the Powerbeats 3.</li></ol><ol start="2"><li>The Mac mini was updated not once, but three times in 2020, offering lower-priced storage options back in March, a limited release Developer Transition Kit in June, followed by the much-anticipated M1 transition in November.</li></ol><ol start="3"><li>Also updated twice in 2020, the March update of the MacBook Air did away with the rose gold color option, but replaced the keyboard, introducing TouchID without a TouchBar for the first time.</li></ol><ol start="4"><li>In true Mac Pro fashion, Apple kept its promise and released Apple Fitness+ before the end of 2020, completing Apple‚Äôs Apple One offering, announced back in September.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Johnny went first, followed by Spencer. Let's see how they did!</p>

<blockquote>1. March of 2020 saw the release of many new updates, including the Powerbeats: a low cost wired version of the Powerbeats Pro and an upgrade to the Powerbeats 3.</blockquote>

<p>Spencer wasn't so sure Powerbeats got updates, but they did, making this a <em>code completion</em>! <a href="https://www.macrumors.com/guide/powerbeats-4/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. The Mac mini was updated not once, but three times in 2020, offering lower-priced storage options back in March, a limited release Developer Transition Kit in June, followed by the much-anticipated M1 transition in November.</blockquote>

<p>Both of our completionists believed this to be possible, which was a good thing since it was a <em>code completion</em>! <a href="https://www.apple.com/newsroom/2020/03/new-macbook-air-has-more-to-love-and-is-now-just-999/">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://en.wikipedia.org/wiki/Developer_Transition_Kit">More&nbsp;‚Üí</a> <a href="https://www.apple.com/newsroom/2020/11/introducing-the-next-generation-of-mac/">More&nbsp;‚Üí</a></p>

<blockquote>3. Also updated twice in 2020, the March update of the MacBook Air did away with the rose gold color option, but replaced the keyboard, introducing TouchID without a TouchBar for the first time.</blockquote>

<p>Johnny doubted this one, which was the right move, since it was the <strong>compiler error</strong>! <a href="https://www.apple.com/newsroom/2020/03/new-macbook-air-has-more-to-love-and-is-now-just-999/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which means‚Ä¶</p>

<blockquote>4. In true Mac Pro fashion, Apple kept its promise and released Apple Fitness+ before the end of 2020, completing Apple‚Äôs Apple One offering, announced back in September.</blockquote>

<p>You guess it! A <em>code completion</em>! <a href="https://www.apple.com/newsroom/2020/12/apple-fitness-plus-the-future-of-fitness-launches-december-14/">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Not Ph·ªü</a>. <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for ‚ÄúNot Pho‚Äù on the iOS and macOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2021/ep-20</guid><title>Episode 20: Don't Be Evil</title><description>We take a look at our Indie App Showcase, and discuss the ever important topic of ethics in software and tech!</description><link>https://codecompletion.io/episodes/2021/ep-20</link><pubDate>Mon, 1 Feb 2021 20:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 20! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Indie App Spotlight, with two apps for you to check out:<ul><li><a href="https://apps.apple.com/us/app/id1496421647">Code Conf</a> by <a href="https://twitter.com/PawelMadejCK">Pawe≈Ç Madej</a>, and</li><li><a href="https://apps.apple.com/gb/app/hour-blocks-day-planner/id1456275153">Hour Blocks</a> by <a href="https://twitter.com/j_t_saeed">James Saeed</a>.</li></ul></li></ul><ul><li>Ethics in Software and Tech.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Uber Lawsuits!</p><ol><li>Lyft‚Äôs CEO sued Uber for allegedly and on multiple occasions sending escorts to his private home, as a supposed retaliation and intimidation tactic against Lyft‚Äôs then-expansion into New York City, which was settled for $2M.</li></ol><ol start="2"><li>An antitrust lawsuit was filed against Uber by a passenger claiming collusion with drivers to raise prices, which later got dramatic when Uber privately investigated said passenger using ‚Äúfraudulent and arguably criminal conduct‚Äù.</li></ol><ol start="3"><li>A former Uber driver filed a lawsuit against Uber regarding its star rating system, which the plaintiff claims disproportionately leads to the firing of people who are not white or who speak with accents.</li></ol><ol start="4"><li>As recently as August, California's labor commissioner is once again suing Uber and Lyft, claiming the companies are stealing wages from drivers by "willfully misclassifying" them as contractors instead of employees.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Spencer gracefully went first, followed by Ben. Let's see how they did!</p>

<blockquote>1. Lyft‚Äôs CEO sued Uber for allegedly and on multiple occasions sending escorts to his private home, as a supposed retaliation and intimidation tactic against Lyft‚Äôs then-expansion into New York City, which was settled for $2M.</blockquote>

<p>Both of our completionists believed this to be possible, which is unfortunate because it was the <strong>compiler error</strong>! This is what happens when you believe in urban legends long enough to research them, only to discover there was no truth to them after all...</p>

<p>Which means‚Ä¶</p>

<blockquote>2. An antitrust lawsuit was filed against Uber by a passenger claiming collusion with drivers to raise prices, which later got dramatic when Uber privately investigated said passenger using ‚Äúfraudulent and arguably criminal conduct‚Äù.</blockquote>

<p>Both Spencer ans Ben thought this was a little too crazy to be true, but it was a <em>code completion</em> after all! <a href="https://money.cnn.com/2016/08/11/technology/uber-lawsuits/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. A former Uber driver filed a lawsuit against Uber regarding its star rating system, which the plaintiff claims disproportionately leads to the firing of people who are not white or who speak with accents.</blockquote>

<p>This was also a <em>code completion</em>! <a href="https://www.npr.org/2020/10/26/927851281/uber-fires-drivers-based-on-racially-biased-star-rating-system-lawsuit-claims">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>4. As recently as August, California's labor commissioner is once again suing Uber and Lyft, claiming the companies are stealing wages from drivers by "willfully misclassifying" them as contractors instead of employees.</blockquote>

<p>You guessed it! A <em>code completion</em>! <a href="https://www.businessinsider.com/uber-lyft-sued-again-in-california-over-driver-classification-2020-8">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a> on the iOS App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-19</guid><title>Episode 19: SAD!</title><description>We introduce Indie App Showcase, discuss GitHub's new features, and open source projects, followed by a Compiler Error all about Thunderbolt!</description><link>https://codecompletion.io/episodes/2020/ep-19</link><pubDate>Sat, 19 Dec 2020 19:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 19! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li><a href="https://apps.apple.com/us/app/opus-one-daily-planner/id941852977">Opus One</a> by <a href="https://twitter.com/joseines75">Jose Cantu</a> in our new Indie App Spotlight.</li><li><a href="https://github.blog/2020-12-08-new-from-universe-2020-dark-mode-github-sponsors-for-companies-and-more/">New features</a> coming to GitHub: Dark Mode, Corporate sponsorships, auto-merging pull requests, and Discussions.</li><li>Running an Open Source repo.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Thunderbolt!</p><ol><li>USB4 consolidates various USB transfer modes introduced over the years by basing itself on the Thunderbolt 3 protocol, though host-support for tunneling existing Thunderbolt devices over a USB4 port is optional.</li></ol><ol start="2"><li>Much like Thunderbolt 3, demonstration versions of Light Peak used a modified USB port, being run from a prototype Mac Pro logic board, transmitting data over a 30-meter optical-fiber cable.</li></ol><ol start="3"><li>Thunderbolt 1, 2, and 3 can support up to 6 daisy chained devices, however devices that can make more than one downstream Thunderbolt port available will require a Thunderbolt 4 compatible computer.</li></ol><ol start="4"><li>The copper variation of Light Peak was co-developed by Apple and Intel, with Apple trademarking the term Thunderbolt, though the trademark was later transferred to Intel.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando refused to go first, so Ben took the lead, followed by Fernando and Spencer. Let's see how they did!</p>

<blockquote>4. The copper variation of Light Peak was co-developed by Apple and Intel, with Apple trademarking the term Thunderbolt, though the trademark was later transferred to Intel.</blockquote>

<p>None of our completionists fell for this one which was a <em>code completion</em>! <a href="http://www.appleinsider.com/articles/11/05/20/thunderbolt_trademark_rights_will_be_transferred_from_apple_to_intel.html">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Much like Thunderbolt 3, demonstration versions of Light Peak used a modified USB port, being run from a prototype Mac Pro logic board, transmitting data over a 30-meter optical-fiber cable.</blockquote>

<p>All our completionists were right to determine that this was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Thunderbolt_(interface)#Introduction">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. USB4 consolidates various USB transfer modes introduced over the years by basing itself on the Thunderbolt 3 protocol, though host-support for tunneling existing Thunderbolt devices over a USB4 port is optional.</blockquote>

<p>Fernando charted his own path, believing this one to cause the error, but it was a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/USB4">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>3. Thunderbolt 1, 2, and 3 can support up to 6 daisy chained devices, however devices that can make more than one downstream Thunderbolt port available will require a Thunderbolt 4 compatible computer.</blockquote>

<p>‚Ä¶which Ben and Spencer both were suspect of, because it is the <strong>compiler error</strong>! Thunderbolt 3 technically supported hubs all along, but it wasn't until now that they became available! <a href="https://eshop.macsales.com/shop/owc-thunderbolt-hub">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a> on the Mac App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-18</guid><title>Episode 18: Host Spotlight: Johnny ‚Äî Always be Learning</title><description>We are spotlight our very own host, Johnny Hicks, and learn how he got into development!</description><link>https://codecompletion.io/episodes/2020/ep-18</link><pubDate>Wed, 9 Dec 2020 01:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 18! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>‚ÄúHow did you get into development?‚Äù</li><li>‚ÄúDid you have any tech fascination before you started programming?‚Äù</li><li>‚ÄúWhat was it like going from a bootcamp to your internship?‚Äù</li><li>‚ÄúWere you able to get mentorship when you started as a junior?‚Äù</li><li>‚ÄúWhat advice would you give when you need to ask questions or get help from your senior developers?‚Äù</li><li>‚ÄúWhat are your current interests as a developer?‚Äù</li><li>‚ÄúWhat were your thoughts seeing a WWDC session for the first time?‚Äù</li><li>‚ÄúAre there any facets of your everyday life that have changed since you became a developer?‚Äù</li><li>‚ÄúAssuming you had an unlimited budget and time, what would you dive into next?‚Äù</li><li>‚ÄúHow did you transition from Junior to Mid-level developer to instructor, etc?‚Äù</li><li>‚ÄúAny final advice?‚Äù</li></ul><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-17</guid><title>Episode 17: It would be nicer if things were nicer</title><description>We discuss Spencer's MacBook Air setup woes, the new 15% App Store rate, and which frameworks you should use when diving into Mac development!</description><link>https://codecompletion.io/episodes/2020/ep-17</link><pubDate>Mon, 30 Nov 2020 22:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 17! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Spencer's MacBook Air setup woes.</li><li>The App Store's new 15% commission rate for small businesses.</li><li>Differences between AppKit, UIKit, and the various flavors of SwiftUI when starting a new Mac app.</li></ul><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Esoteric Objective-C ‚Äústandard library‚Äù features!</p><ol><li>Tagged pointers encode their entire object into the non-addressing bits of a pointer, ultimately allowing faster allocations for specific hard-coded classes known by the runtime.</li></ol><ol start="2"><li>NSZone‚Äôs primary purpose was to allow objects to be allocated within the same memory page, so swap would be fast, and those objects could be free‚Äôd in one go.</li></ol><ol start="3"><li>NSProxy is a non-NSObject base class that allows for message dispatch to be easily redirected to another object, but does not have an initializer implemented for subclasses to fall back on.</li></ol><ol start="4"><li><strong>NSAtom is a special class that is ultimately the boolean-opposite to nil: any message you send it will always return an </strong>NSAtom, which is very intentionally equal to 1.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando went first, followed by Spencer. Let's see how they did!</p>

<blockquote>1. Tagged pointers encode their entire object into the non-addressing bits of a pointer, ultimately allowing faster allocations for specific hard-coded classes known by the runtime.</blockquote>

<p>Both of our completionists thought this was true, but it was unfortunately the <strong>compiler error</strong>! Turns out the entire addressing bit-space is used for the payload, and any class can request a tag at runtime! <a href="https://www.mikeash.com/pyblog/friday-qa-2012-07-27-lets-build-tagged-pointers.html">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. NSZone‚Äôs primary purpose was to allow objects to be allocated within the same memory page, so swap would be fast, and those objects could be free‚Äôd in one go.</blockquote>

<p>Spencer fell for this one, which was actually a <em>code completion</em>! <a href="http://cocoadev.github.io/NSZone/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. NSProxy is a non-NSObject base class that allows for message dispatch to be easily redirected to another object, but does not have an initializer implemented for subclasses to fall back on.</blockquote>

<p>Both of our completionists thought this was a code completion‚Ä¶ because it was a <em>code completion</em>! <a href="https://www.mikeash.com/pyblog/friday-qa-2013-10-25-nsobject-the-class-and-the-protocol.html">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. __NSAtom is a special class that is ultimately the boolean-opposite to nil: any message you send it will always return an __NSAtom, which is very intentionally equal to 1.</blockquote>

<p>‚Ä¶which Fernando was unable to continue his streak with, because it was also a <em>code completion</em>! <a href="https://brian-webster.tumblr.com/post/102637339374/the-mystery-of-the-crashing-nspredicate">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id622463230?pt=1765080&ct=CodeCompletion&mt=8">Pennant</a>! Search for <a href="https://apps.apple.com/app/apple-store/id622463230?pt=1765080&ct=CodeCompletion&mt=8">Pennant</a> on the iOS App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-16</guid><title>Episode 16: It's mini in the non-trademarkable kind of way</title><description>We discuss Apple's recent mini products, Big Sur's release, and Fernando's new project!</description><link>https://codecompletion.io/episodes/2020/ep-16</link><pubDate>Wed, 25 Nov 2020 19:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 16! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>More thoughts on the iPhone 12 mini, Mac mini, and HomePod mini.</li><li>Big Sur's release, and the launch issues that came about.</li><li>Fernando's new project, supplemental dev skills, and interview standardization.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What etymology lead to the random number generator of choice on Apple platforms being named <code>arc4random()</code>?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
</code><code><span class="splashkeyword">import</span> Darwin

<span class="splashkeyword">public func</span> arc4random() -&gt; <span class="splashtype">UInt32</span>

<span class="splashkeyword">public func</span> arc4random_buf(<span class="splashkeyword">_</span> buffer: <span class="splashtype">UnsafeMutableRawPointer</span>!, <span class="splashkeyword">_</span> numberOfBytes: <span class="splashtype">Int</span>)

<span class="splashkeyword">public func</span> arc4random_uniform(<span class="splashkeyword">_</span> upperBound: <span class="splashtype">UInt32</span>) -&gt; <span class="splashtype">UInt32</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><p>We all know and love Swift, which owes its inspiration from Objective-C, which owes <em>its</em> inspiration from Smalltalk!</p><ol><li>Unlike many languages, Smalltalk has no if statement, let alone other control structures. Control flow is instead implemented as methods sent to objects.</li></ol><ol start="2"><li>Like Objective-C, Smalltalk makes use of argument labels on each of a methods arguments, but does not wrap every method call in square brackets.</li></ol><ol start="3"><li>Only six "keywords" are reserved in Smalltalk: true, false, nil, self, super, and thisContext, which are called pseudo-variables in the language.</li></ol><ol start="4"><li>Like many languages in the 80s, Smalltalk uses the dot character to access properties, the semicolon to delineate statements, and curly brackets to denote blocks.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Ben went first, followed by Fernando. Let's see how they did!</p>

<blockquote>2. Like Objective-C, Smalltalk makes use of argument labels on each of a methods arguments, but does not wrap every method call in square brackets.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Smalltalk#Messages">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Only six "keywords" are reserved in Smalltalk: true, false, nil, self, super, and thisContext, which are called pseudo-variables in the language.</blockquote>

<p>They both thought this was also factual, and it is also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Smalltalk#Syntax">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. Unlike many languages, Smalltalk has no if statement, let alone other control structures. Control flow is instead implemented as methods sent to objects.</blockquote>

<p>Ben didn't think Smalltalk was weird enough, but it turns out it is, because was a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Smalltalk#Control_structures">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Like many languages in the 80s, Smalltalk uses the dot character to access properties, the semicolon to delineate statements, and curly brackets to denote blocks.</blockquote>

<p>‚Ä¶which Fernando was rightfully skeptical of, because this was the <strong>compiler error</strong>! Smalltalk uses the dot character to selineate statements, the semicolon to cascate method calls, and square brackets to denote blocks! <a href="https://en.wikipedia.org/wiki/Smalltalk#Expressions">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://www.jonnybcodes.com">JohnnyB</a>'s Bon Voyage eCommerce App course. Visit <a href="http://bon-voyage.app/course">bon-voyage.app/course</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay up to date with all his courses!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-15</guid><title>Episode 15: Mini mini M1ni</title><description>We discuss Apple's recent announcements, including the iPhones 12, what we really want form a mini, and the new M1 chip!</description><link>https://codecompletion.io/episodes/2020/ep-15</link><pubDate>Mon, 16 Nov 2020 23:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 15! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>The iPhones, especially the desires around a perfect iPhone mini.</li><li>The M1 processor.</li></ul><h2>üöß #CompleteTheCode</h2><p><em>Last</em> week's <em>#CompleteTheCode</em>:</p><blockquote>What key API allows for Swift Arrays and Dictionaries to implement Copy-on-Write (CoW)?</blockquote><pre><code class="splashlineNumbers">1
2
3
</code><code><span class="splashkeyword">let</span> firstArray = [<span class="splashnumber">0</span>, <span class="splashnumber">1</span>, <span class="splashnumber">2</span>]
<span class="splashkeyword">var</span> secondArray = firstArray <span class="splashcomment">// The underlying storage is still shared here</span>
secondArray.<span class="splashcall">append</span>(<span class="splashnumber">3</span>) <span class="splashcomment">// The underlying storage is copied first, then updated</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><p>This week's theme: Languages inspired by Objective-C!</p><ol><li>Hoping to improve Javascript, Objective-J was invented as a way of bringing Objective-C‚Äôs class and message sending syntax and more over to web development, but without the *‚Äôs.</li></ol><ol start="2"><li>Objective-C++ is a variant of Objective-C that adds the same extensions to C++ as it does to C, effectively duplicating the implementations of classes, exception handling, and closures.</li></ol><ol start="3"><li>Objective-C# is another variant of Objective-C started in 2009 after the success of the iPhone hoping to bring dynamic dispatch to C#, but was not actively maintained.</li></ol><ol start="4"><li>Inspired by an off-hand remark, Objective-Rust is a toy language recently developed that adds some Objective-C syntax to Rust, for better interoperability between the two languages.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Johnny went first, followed by Spencer. Let's see how they did!</p>

<blockquote>2. Objective-C++ is a variant of Objective-C that adds the same extensions to C++ as it does to C, effectively duplicating the implementations of classes, exception handling, and closures.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Objective-C#Objective-C++">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>4. Inspired by an off-hand remark, Objective-Rust is a toy language recently developed that adds some Objective-C syntax to Rust, for better interoperability between the two languages.</blockquote>

<p>They both thought this was also factual, and it is also a <em>code completion</em>! <a href="https://belkadan.com/blog/2020/08/Objective-Rust/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. Hoping to improve Javascript, Objective-J was invented as a way of bringing Objective-C‚Äôs class and message sending syntax and more over to web development, but without the *‚Äôs.</blockquote>

<p>Spencer wasn't so sure about this one, but unlike last week, this was still a <em>code completion</em>! <a href="https://www.cappuccino.dev/learn/objective-j.html">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>3. Objective-C# is another variant of Objective-C started in 2009 after the success of the iPhone hoping to bring dynamic dispatch to C#, but was not actively maintained.</blockquote>

<p>‚Ä¶which Johnny was right to choose because this was the <strong>compiler error</strong>! As far as we know, C# already has many of the features that would have been desirable from Objective-C, so no one has made a serious attempt at Objective-C#‚Ä¶ yet‚Ä¶ <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Mystiko</a>. <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Mystiko on the iMessage App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-14</guid><title>Episode 14: We Broke The First Rule of Dev Club</title><description>We predict the announcements to this week's One More Thing event, then take a deep dive into interviewing like a pro!</description><link>https://codecompletion.io/episodes/2020/ep-14</link><pubDate>Wed, 11 Nov 2020 19:11:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 14! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>What Apple could announce at the One More Time event.</li><li>How to nail an interview like a pro.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What key API allows for Swift Arrays and Dictionaries to implement Copy-on-Write (CoW)?</blockquote><pre><code class="splashlineNumbers">1
2
3
</code><code><span class="splashkeyword">let</span> firstArray = [<span class="splashnumber">0</span>, <span class="splashnumber">1</span>, <span class="splashnumber">2</span>]
<span class="splashkeyword">var</span> secondArray = firstArray <span class="splashcomment">// The underlying storage is still shared here</span>
secondArray.<span class="splashcall">append</span>(<span class="splashnumber">3</span>) <span class="splashcomment">// The underlying storage is copied first, then updated</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Neuralsort makes use of a convolutional neural network to sort at O(2n) speeds on average, though the worst case can take quadratic time.</li></ol><ol start="2"><li>Spaghetti Sort is capable of sorting its contents at O(n) speeds even in the worst of cases, but requires a quadratic amount of memory in the process.</li></ol><ol start="3"><li>Bogosort uses the power of random shuffling to achieve a computational complexity of O(n) in the best of cases, but is unfortunately not stable in the process.</li></ol><ol start="4"><li>Named after Tim, Timsort is used in Swift 5 to perform sorting needs in Arrays, which is especially tuned to reversing the order of an already sorted collection.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Ben went first, followed by Spencer. Let's see how they did!</p>

<blockquote>2. Spaghetti Sort is capable of sorting its contents at O(n) speeds even in the worst of cases, but requires a quadratic amount of memory in the process.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Spaghetti_sort">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Bogosort uses the power of random shuffling to achieve a computational complexity of O(n) in the best of cases, but is unfortunately not stable in the process.</blockquote>

<p>They both thought this was also factual, and it is also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Bogosort">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. Neuralsort makes use of a convolutional neural network to sort at O(2n) speeds on average, though the worst case can take quadratic time.</blockquote>

<p>Spencer wasn't so sure about this one, which was the right hunch to have since it was the <strong>compiler error</strong>! Neuralsort was completely made up, though right up there with a fictional Blockchain sort, it feels like it's just <em>waiting</em> to be invented.</p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Named after Tim, Timsort is used in Swift 5 to perform sorting needs in Arrays, which is especially tuned to reversing the order of an already sorted collection.</blockquote>

<p>‚Ä¶which Ben thought for sure was too fishy to be true, but it was a <em>code completion</em> after all! <a href="https://en.wikipedia.org/wiki/Timsort#cite_note-8">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a> on the iOS App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-13</guid><title>Episode 13: Host Spotlight: Dimitri ‚Äî Happy to Sell Only Two Copies</title><description>We are spotlight our very own host, Dimitri Bouniol, and learn how he got into development!</description><link>https://codecompletion.io/episodes/2020/ep-13</link><pubDate>Tue, 3 Nov 2020 18:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 13! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>How Dimitri got into development.</li><li>Dimitri's current interests and areas to explore.</li><li>Fernando asks: ‚ÄúYou can swap one feature from Swift and Obj-C. Which feature from Obj-C goes to Swift and which does Swift give to Obj-C? Explain in iambic pentameter.‚Äù</li><li>Spencer asks: ‚ÄúIf you could have time to work on an old side-project/hobby project what would it be and why?‚Äù</li></ul><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by Fernando and his new book: <a href="https://gumroad.com/l/QutHw">From Junior to Senior: Practical iOS Style Guide</a>. Go to <a href="https://twitter.com/fromjrtosr">https://twitter.com/fromjrtosr</a> today to learn more!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-12</guid><title>Episode 12: The First Rule of Dev Club‚Ä¶</title><description>We are joined by special guest James McDougall and discuss how he got into development, and how to get your foot in the door as a Junior Developer!</description><link>https://codecompletion.io/episodes/2020/ep-12</link><pubDate>Mon, 26 Oct 2020 23:40:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 12! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code! This time, we are joined by special guest, Dan Morse! Be sure to follow them on Twitter at <a href="https://twitter.com/JamesWMcDougall">@JamesWMcDougall</a>.</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>James's path from audio engineer to app developer.</li><li>How to get an interview when you don't have experience.</li><li>Fudging your resumes, but not lying to the hiring manager.</li></ul><h2>üöß #CompleteTheCode</h2><p><em>Last</em> week's <em>#CompleteTheCode</em>:</p><blockquote>What sort of crash could easily occur with the following code?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</code><code><span class="splashkeyword">class</span> Person: <span class="splashtype">CustomStringConvertible</span> {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span> = <span class="splashstring">""</span>
    <span class="splashkeyword">unowned var</span> twin: <span class="splashtype">Person</span>?
    
    <span class="splashkeyword">private init</span>() { }
    
    <span class="splashkeyword">static func</span> makeTwins() -&gt; (<span class="splashtype">Person</span>, <span class="splashtype">Person</span>) {
        <span class="splashkeyword">let</span> (a, b) = (<span class="splashtype">Person</span>(), <span class="splashtype">Person</span>())
        a.<span class="splashproperty">twin</span> = b; b.<span class="splashproperty">twin</span> = a
        
        <span class="splashkeyword">return</span> (a, b)
    }
    
    <span class="splashkeyword">var</span> description: <span class="splashtype">String</span> { <span class="splashstring">"Twin:</span> \(twin?.<span class="splashproperty">name</span> ?? <span class="splashstring">""</span>)<span class="splashstring">"</span> }
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>The UTF-32 view provides access to each character as a 4-byte UInt32, representing the complete range of all 4 billion unicode code points, but in their original, possibly decomposed, forms.</li></ol><ol start="2"><li>The UTF-8 view optimizes for memory at a disadvantage to manipulation speed, since each unicode character may be represented by one or more bytes, making length calculations costly, but necessary for many C APIs.</li></ol><ol start="3"><li>Easily accessibly by treating a string like a collection, the default view represents normalized characters as they would be displayed on screen, even if they were originally decomposed.</li></ol><ol start="4"><li>The UTF-16 view is optimal when interacting with unicode libraries such as Objective-C‚Äôs NSString since it vends UInt16 code-points, as is standard in many programing models.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>As our special guest, James went first, followed by Fernando. Let's see how they did!</p>

<blockquote>2. The UTF-8 view optimizes for memory at a disadvantage to manipulation speed, since each unicode character may be represented by one or more bytes, making length calculations costly, but necessary for many C APIs.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://developer.apple.com/documentation/swift/string#2905656">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. The UTF-32 view provides access to each character as a 4-byte UInt32, representing the complete range of all 4 billion unicode code points, but in their original, possibly decomposed, forms.</blockquote>

<p>James was tempted by this one, but ultimately chose number 3, and Fernando, a contrarian, ignored this wisdom, which is unfortunate because it was the <strong>compiler error</strong>! Although there is a Unicode Scalar View, there is no native utf32 view that vends plain UInt32s‚Ä¶ <a href="https://developer.apple.com/documentation/swift/string#2905651">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Easily accessibly by treating a string like a collection, the default view represents normalized characters as they would be displayed on screen, even if they were originally decomposed.</blockquote>

<p>James ultimately though this one was being sneaky, but it was a <em>code completion</em> afterall! <a href="https://developer.apple.com/documentation/swift/string#2905650">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. The UTF-16 view is optimal when interacting with unicode libraries such as Objective-C‚Äôs NSString since it vends UInt16 code-points, as is standard in many programing models..</blockquote>

<p>‚Ä¶which Fernando should have known but picked anyway, as it was also a <em>code completion</em>. <a href="https://developer.apple.com/documentation/swift/string#2905653">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Not Ph·ªü</a>. <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for ‚ÄúNot Pho‚Äù on the iOS and macOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-11</guid><title>Episode 11: Fernando's Going to Eat His Hat</title><description>We discuss last week's Hi, Speed event, including the new HomePod mini, iPhone 12, and 5G!</description><link>https://codecompletion.io/episodes/2020/ep-11</link><pubDate>Mon, 19 Oct 2020 19:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 11! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>If 5G is as useful a feature as Apple made it out to be.<ul><li><a href="https://www.youtube.com/watch?v=_CTUs_2hq6Y">5G: Explained by MKBHD</a>.</li><li>The new HomePod mini.</li><li>The new iPhone 12.</li><li>Which device we'll all be getting.</li></ul></li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What sort of crash could easily occur with the following code?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</code><code><span class="splashkeyword">class</span> Person: <span class="splashtype">CustomStringConvertible</span> {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span> = <span class="splashstring">""</span>
    <span class="splashkeyword">unowned var</span> twin: <span class="splashtype">Person</span>?
    
    <span class="splashkeyword">private init</span>() { }
    
    <span class="splashkeyword">static func</span> makeTwins() -&gt; (<span class="splashtype">Person</span>, <span class="splashtype">Person</span>) {
        <span class="splashkeyword">let</span> (a, b) = (<span class="splashtype">Person</span>(), <span class="splashtype">Person</span>())
        a.<span class="splashproperty">twin</span> = b; b.<span class="splashproperty">twin</span> = a
        
        <span class="splashkeyword">return</span> (a, b)
    }
    
    <span class="splashkeyword">var</span> description: <span class="splashtype">String</span> { <span class="splashstring">"Twin:</span> \(twin?.<span class="splashproperty">name</span> ?? <span class="splashstring">""</span>)<span class="splashstring">"</span> }
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Just introduced this month, swift-algorithms is a new package that makes complex sequence and collection algorithm implementations available which wouldn‚Äôt otherwise fit in with the standard library.</li></ol><ol start="2"><li>A foundational library to many server-side swift initiatives, swift-nio exposes high level building blocks for interacting with non-blocking IO, such as files, streams, and datagrams.</li></ol><ol start="3"><li>Built on top of swift-nio, swift-metrics is a package primarily intended for web analytics that makes it easy to collect data from your server application in a privacy conscious way.</li></ol><ol start="4"><li>Re-implementing much of the functionality URLSession provides, async-http-client is a high performance HTTP client for Swift actively maintained by the Swift Server Work Group.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando went first, followed by Ben. Let's see how they did!</p>

<blockquote>1. By using extended delimiters for string literals, all special characters including the backslash will be represented as normal characters.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID417">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://developer.apple.com/app-store/kids-apps/">More&nbsp;‚Üí</a></p>

<blockquote>4. Re-implementing much of the functionality URLSession provides, async-http-client is a high performance HTTP client for Swift actively maintained by the Swift Server Work Group.</blockquote>

<p>They both thought this was also factual, and it is indeed a <em>code completion</em>! <a href="https://developer.apple.com/documentation/swift/expressiblebynilliteral">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. A foundational library to many server-side swift initiatives, swift-nio exposes high level building blocks for interacting with non-blocking IO, such as files, streams, and datagrams.</blockquote>

<p>Fernando had doubts whether Swift NIO was actually considered a high-level library, and Ben followed his lead, which is unfortunate because it was still a <em>code completion</em>! <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID416">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>3. Built on top of swift-nio, swift-metrics is a package primarily intended for web analytics that makes it easy to collect data from your server application in a privacy conscious way.</blockquote>

<p>‚Ä¶which everyone incorrectly thought was another code completion, but it was the <strong>compiler error</strong>! Not only is swift-metrics not built on Swift NIO, it is also not meant for web analytics, and is instead there to see if your application is performing. <a href="https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a> on the Mac App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-10</guid><title>Episode 10: I Don't Want to be the Negative Nancy‚Ä¶</title><description>We predict what will be announced during this week's Hi, Speed event!</description><link>https://codecompletion.io/episodes/2020/ep-10</link><pubDate>Mon, 12 Oct 2020 21:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 10! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>The ‚ÄúHi, Speed‚Äù event.</li><li>New iPhone predictions.</li><li>The hypothetical HomePod mini.</li><li>Whether we all want AirTags or not.</li></ul><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id622463230?pt=1765080&ct=CodeCompletion&mt=8">Pennant</a>! Search for <a href="https://apps.apple.com/app/apple-store/id622463230?pt=1765080&ct=CodeCompletion&mt=8">Pennant</a> on the iOS App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-9</guid><title>Episode 9: Just Enough Research</title><description>We discuss A14 performance leaks, Accessibility, and who to ask to test your apps.</description><link>https://codecompletion.io/episodes/2020/ep-9</link><pubDate>Mon, 5 Oct 2020 18:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 9! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>New A14 performance leaks.</li><li>Integrating Accessibility in your apps.</li><li>Testing your apps with real users.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What are the changes you could make to the code below so that we can have a <code>ProcessingCoordinator.Error</code> nested Error type?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
</code><code><span class="splashkeyword">struct</span> ProcessingCoordinator {
    <span class="splashcomment">// ...</span>
}

<span class="splashcomment">// We want this error type to be usable as ProcessingCoordinator.Error
// What changes would you make?</span>
<span class="splashkeyword">enum</span> &lt;# <span class="splashtype">My ProcessingCoordinator Error Type</span> #&gt;: <span class="splashtype">Error</span> {
    <span class="splashkeyword">case</span> notFound
    <span class="splashcomment">// ...</span>
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>By using extended delimiters for string literals, all special characters including the backslash will be represented as normal characters.</li></ol><ol start="2"><li>Not limited to optionals, any type can conform to <code>ExpressibleByNilLiteral</code> to have a special initializer called if <code>nil</code> is used along with that type.</li></ol><ol start="3"><li>Like integer literals, floating point literals can be expressed in binary, octal, decimal, or hexadecimal forms.</li></ol><ol start="4"><li>Although Dictionaries prohibit it, <code>ExpressibleByDictionaryLiteral</code> allows for multiple entries with the same key.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Eager to continue a winning streak, Ben went first, followed by Spencer. Let's see how they did!</p>

<blockquote>1. By using extended delimiters for string literals, all special characters including the backslash will be represented as normal characters.</blockquote>

<p>Both of our completionists thought this was true, and it is indeed a <em>code completion</em>! <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID417">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Not limited to optionals, any type can conform to <code>ExpressibleByNilLiteral</code> to have a special initializer called if <code>nil</code> is used along with that type.</blockquote>

<p>They both thought this was also factual, and it is indeed a <em>code completion</em>! <a href="https://developer.apple.com/documentation/swift/expressiblebynilliteral">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Like integer literals, floating point literals can be expressed in binary, octal, decimal, or hexadecimal forms.</blockquote>

<p>Although Ben initially had some doubts, both of our completionists thought this was true, which is unfortunate because it was the <strong>compiler error</strong>! Although you can define a hexadecimal or decimal floating point number, you cannot do so for binary and octal numbers. <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID416">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Although Dictionaries prohibit it, <code>ExpressibleByDictionaryLiteral</code> allows for multiple entries with the same key.</blockquote>

<p>‚Ä¶which everyone incorrectly thought was the error, but it was a <em>code completion</em> after all! <a href="https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1533254320?pt=1765080&ct=CodeCompletion&mt=8">Sticky Widgets</a> on the iOS App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-8</guid><title>Episode 8: Is Two Wins a Streak?</title><description>We discuss how the App Store, app review, and marketing your app has changes over the years.</description><link>https://codecompletion.io/episodes/2020/ep-8</link><pubDate>Mon, 28 Sep 2020 17:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 8! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>What it‚Äôs like launching an app in 2020 compared to 2008.</li><li>How the process of app review has changed.</li><li>How developers are more on the hook than ever to provide their own marketing as App Store features don‚Äôt weigh as heavily as they did in the past.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>What's the technical limitation that prevents line 3? Why is line 4 allowed?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
</code><code><span class="splashkeyword">struct</span> Folder {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span>
    <span class="splashkeyword">var</span> parent: <span class="splashtype">Folder</span>? <span class="splashcomment">// What technical limitation prevents this?</span>
    <span class="splashkeyword">var</span> children: [<span class="splashtype">Folder</span>] <span class="splashcomment">// And why is this ok?</span>
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Early versions of iPhone OS were limited to a black home screen background, but iOS 3.2 added the capability to finally change it.</li></ol><ol start="2"><li>iOS 4 brought emoji support to the iPhone and iPad for the first time via a built-in keyboard.</li></ol><ol start="3"><li>Although available since the very beginning, iPhone OS 2 brought a scientific calculator to the base feature set when the device was in landscape.</li></ol><ol start="4"><li>Notification Center finally made its debut in iOS 5, allowing users to manage notifications.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Ben went first, followed by Spencer. Let's see how they did!</p>

<blockquote>3. Although available since the very beginning, iPhone OS 2 brought a scientific calculator to the base feature set when the device was in landscape.</blockquote>

<p>Everyone thought this was true, and it would be odd if they didn't, since this is a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/IPhone_OS_2">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>4. Notification Center finally made its debut in iOS 5, allowing users to manage notifications.</blockquote>

<p>Everyone was also in agreement here, also making this a <em>code completion</em> after all! <a href="https://en.wikipedia.org/wiki/IOS_5">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>1. Early versions of iPhone OS were limited to a black home screen background, but iOS 3.2 added the capability to finally change it.</blockquote>

<p>Despite having an iPod touch stuck on this version, Spencer wasn't too sure, which was unfortunate since it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/IOS_version_history#iPhone_OS_3">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>2. iOS 4 brought emoji support to the iPhone and iPad for the first time via a built-in keyboard.</blockquote>

<p>‚Ä¶which Ben once again had severe doubts with, since it was the <strong>compiler error</strong>! Although emoji would become a widely used feature in iOS 5, they could be enabled via sneaky apps in iOS 4, and were actually available in Japan as early as iPhone OS 2.2! <a href="https://emojipedia.org/apple/iphone-os-2.2/">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by Fernando and his new book: <a href="https://gumroad.com/l/QutHw">From Junior to Senior: Practical iOS Style Guide</a>. Go to <a href="https://twitter.com/fromjrtosr">https://twitter.com/fromjrtosr</a> today to learn more!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-7</guid><title>Episode 7: Code Completion SE</title><description>We discuss Apple's ‚ÄúTime Flies‚Äù September Event, and what it means for developers.</description><link>https://codecompletion.io/episodes/2020/ep-7</link><pubDate>Mon, 21 Sep 2020 16:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 7! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>iOS 14's rushed release.</li><li><a href="https://www.whatsnewinswift.com/?from=5.2&to=5.3">New Features in Swift 5.3</a>.</li><li>The A14 making it's debut on iPad before iPhone.</li><li>The return of Touch ID on the iPad's top button.</li><li>The new Apple One subscription service.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>The code below will output <code>Hello, Ben!</code>. How would you change line 3 so it outputs <code>Hello, Dimitri!</code> instead?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
</code><code><span class="splashkeyword">var</span> name = <span class="splashstring">"Dimitri"</span>

<span class="splashkeyword">var</span> introduce = {
    <span class="splashcomment">// What change can you make to the above line
    // to output "Dimitri" rather than "Ben"?</span>
    <span class="splashcall">print</span>(<span class="splashstring">"Hello,</span> \(name)<span class="splashstring">!"</span>)
}

name = <span class="splashstring">"Ben"</span>

<span class="splashcall">introduce</span>()
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Introduced in 1987, the Macintosh SE was a Special Edition of the 128k Mac that was the first Mac to offer a color display as an option, although limited to 8 bits.</li></ol><ol start="2"><li>Introduced 2 years later as a processor update of its predecessor, the Macintosh SE/30 was unofficially expandable to a whopping 128 MB of RAM, an amount that was greater than many future models, and its board and front panel were available as official upgrades for the original Macintosh SE.</li></ol><ol start="3"><li>A surprise to many, the SE naming made a comeback in 2016 as the iPhone SE, a Special Edition of iPhone 6S that used the iPhone 5S case, and would mark a new tier of low-cost iPhones with up-to-date components.</li></ol><ol start="4"><li>Available today, the Apple Watch SE follows in the footsteps of the iPhone SE, but rather than use the internals of the flagship Series 6, it is instead closer to a limited variant of the Series 5, with an S5 package on a chip, but without an always-on display and electrocardiogram sensor.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Johnny went first, followed by Fernando and Ben. Let's see how they did!</p>

<blockquote>4. Available today, the Apple Watch SE follows in the footsteps of the iPhone SE, but rather than use the internals of the flagship Series 6, it is instead closer to a limited variant of the Series 5, with an S5 package on a chip, but without an always-on display and electrocardiogram sensor.</blockquote>

<p>Everyone thought this was true, and given the timing, it would be surprising if they didn't, making this one a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_Watch_SE">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. A surprise to many, the SE naming made a comeback in 2016 as the iPhone SE, a Special Edition of iPhone 6S that used the iPhone 5S case, and would mark a new tier of low-cost iPhones with up-to-date components.</blockquote>

<p>Fernando wasn't so sure about this one and detected some code smell, but it was also a <em>code completion</em> after all! <a href="https://en.wikipedia.org/wiki/IPhone_SE_(1st_generation)">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Introduced 2 years later as a processor update of its predecessor, the Macintosh SE/30 was unofficially expandable to a whopping 128 MB of RAM, an amount that was greater than many future models, and its board and front panel were available as official upgrades for the original Macintosh SE.</blockquote>

<p>Johnny wasn't too sure about the first two, but picked this one instead, which was unfortunate since it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Macintosh_SE/30">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>1. Introduced in 1987, the Macintosh SE was a Special Edition of the 128k Mac that was the first Mac to offer a color display as an option, although limited to 8 bits.</blockquote>

<p>‚Ä¶which Ben could not believe, since it was the <strong>compiler error</strong>! Although color displays were available for some earlier Apple computers, they would not make it to the Macintosh line for a few more years due to memory and processing requirements. Not only that, ‚ÄúSE‚Äù did not stand for ‚ÄúSpecial Edition‚Äù, but ‚ÄúSystem Expansion‚Äù! <a href="https://en.wikipedia.org/wiki/Macintosh_SE">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a>! Search for <a href="https://apps.apple.com/app/apple-store/id1525104124?mt=12">Super Easy Timer</a> on the Mac App Store today to give it a try!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-6</guid><title>Episode 6: I Hate This Game</title><description>With special guests Josh Holtz and Tyler Hillsman, we discuss different App Store pricing models, and which would be the best fit for Josh's new app.</description><link>https://codecompletion.io/episodes/2020/ep-6</link><pubDate>Mon, 14 Sep 2020 16:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 6! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show! This time, we are joined by special guests, Josh Holtz and Tyler Hillsman! Be sure to follow them on Twitter at <a href="https://twitter.com/joshdholtz">@joshdholtz</a> and <a href="https://twitter.com/thillsman">@thillsman</a>.</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Different App Store Pricing models.</li><li>The benefits of paid up front with the ever-elusive charts.</li><li>Subscription vs In App Purchase for unlocking functionality in an app.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Review the following code ‚Äî what might the developer have overlooked?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</code><code><span class="splashkeyword">class</span> View {
    <span class="splashkeyword">private(set) var</span> parent: <span class="splashtype">View</span>?
    <span class="splashkeyword">private(set) var</span> children: [<span class="splashtype">View</span>] = []
    
    <span class="splashkeyword">func</span> removeFromParentView() {
        <span class="splashkeyword">guard let</span> parent = parent <span class="splashkeyword">else</span> { <span class="splashkeyword">return</span> }
        parent.<span class="splashproperty">children</span>.<span class="splashcall">removeAll</span> { $0 === <span class="splashkeyword">self</span> }
    }
    
    <span class="splashkeyword">func</span> add(<span class="splashkeyword">_</span> child: <span class="splashtype">View</span>) {
        <span class="splashkeyword">guard</span> child != <span class="splashkeyword">self else</span> { <span class="splashcall">preconditionFailure</span>() }
        child.<span class="splashcall">removeFromParentView</span>()
        children.<span class="splashcall">append</span>(child)
        child.<span class="splashproperty">parent</span> = <span class="splashkeyword">self</span>
    }
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Streaming game services may offer a catalog app on the App¬†Store to help users sign up for the service and find the games on the App¬†Store, provided that the app adheres to all guidelines, including offering users the option to pay for a subscription with in-app purchase and use Sign in with Apple.</li></ol><ol start="2"><li>Apps in the Kids category must not include links out of the app, purchasing opportunities, or other distractions to kids unless guarded behind a parental gate.</li></ol><ol start="3"><li>Screenshots should not include text and image overlays other than to illustrate the app in use, and they must not use any Apple devices or products for marketing purposes.</li></ol><ol start="4"><li>If your app displays Activity rings, they should not visualize Move, Exercise, or Stand data in a way that resembles the Activity control.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Josh and Tyler went first, followed by Fernando and Ben. Let's see how they did!</p>

<blockquote>3. Screenshots should not include text and image overlays other than to illustrate the app in use, and they must not use any Apple devices or products for marketing purposes.</blockquote>

<p>Everyone thought this was true, and it really should be true! Unfortunately for them though, this one was the <strong>compiler error</strong>! The actual text reads:</p>

<p><strong>2.3.3</strong> Screenshots should show the app in use, and not merely the title art, log-in page, or splash screen. They may also include text and image overlays (e.g. to demonstrate input mechanisms, such as an animated touch point or Apple Pencil) and show extended functionality on device, such as Touch Bar. <a href="https://developer.apple.com/app-store/review/guidelines/#2.3.3">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>4. If your app displays Activity rings, they should not visualize Move, Exercise, or Stand data in a way that resembles the Activity control.</blockquote>

<p>Tyler and Ben had sincere doubts about this one and thought it was the compiler error, but it was a <em>code completion</em> after all! <a href="https://developer.apple.com/app-store/review/guidelines/#5.2.5">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Apps in the Kids category must not include links out of the app, purchasing opportunities, or other distractions to kids unless guarded behind a parental gate.</blockquote>

<p>Although Josh was leaning on number 3 originally, this one was chosen instead, but it was also a <em>code completion</em>! <a href="https://developer.apple.com/app-store/review/guidelines/#1.3">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://developer.apple.com/app-store/kids-apps/">More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>1. Streaming game services may offer a catalog app on the App¬†Store to help users sign up for the service and find the games on the App¬†Store, provided that the app adheres to all guidelines, including offering users the option to pay for a subscription with in-app purchase and use Sign in with Apple.</blockquote>

<p>‚Ä¶which Fernando highly doubted, but it was also a <em>code completion</em>, and one introduced the morning of the day we all recorded on! <a href="https://developer.apple.com/app-store/review/guidelines/#4.9.2">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://developer.apple.com/news/?id=xqk627qu">More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by Fernando and his new book: <a href="https://gumroad.com/l/QutHw">From Junior to Senior: Practical iOS Style Guide</a>. Go to <a href="https://twitter.com/fromjrtosr">https://twitter.com/fromjrtosr</a> today to learn more!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-5</guid><title>Episode 5: Emacs Should Die a Fiery Death</title><description>We discuss when to rewrite your code or tackle technical dept, introduce the world to documentation driven development, and discuss why the lack of good documentation may be hurting juniors trying to get established.</description><link>https://codecompletion.io/episodes/2020/ep-5</link><pubDate>Tue, 8 Sep 2020 16:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 5! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>When to rewrite a project from scratch, when to buckle down and conquer technical debt, and when to do a little something in between.</li><li>The importance of documenting code, and how the lack of documentation stifles newcomers from becoming established developers.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Review the following code ‚Äî what might the developer have overlooked?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</code><code><span class="splashkeyword">class</span> DateCell: <span class="splashtype">UITableViewCell</span> {
    
    <span class="splashkeyword">private static let</span> dateFormatter: <span class="splashtype">DateFormatter</span> = {
        <span class="splashkeyword">let</span> dateFormatter = <span class="splashtype">DateFormatter</span>()
        dateFormatter.<span class="splashproperty">dateFormat</span> = <span class="splashstring">"YYYY-MM-dd"</span>
        <span class="splashkeyword">return</span> dateFormatter
    }()
    
    <span class="splashkeyword">var</span> date: <span class="splashtype">Date</span>? {
        <span class="splashkeyword">didSet</span> {
            <span class="splashkeyword">switch</span> date {
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">some</span>(<span class="splashkeyword">let</span> date):
                textLabel?.<span class="splashproperty">text</span> = <span class="splashtype">Self</span>.<span class="splashproperty">dateFormatter</span>.<span class="splashcall">string</span>(from: date)
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">none</span>:
                textLabel?.<span class="splashproperty">text</span> = <span class="splashstring">"N/A"</span>
            }
        }
    }
    
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Although the same can be done using modifier and arrow keys, the text cursor can be quickly moved to the beginning and to the end of a document by using <code>‚åÉA</code> to go to the beginning, and <code>‚åÉZ</code> to go to the end.</li></ol><ol start="2"><li>You may know of the <code>‚åò‚å´</code> command to delete the entire line to the left of the text cursor, but <code>‚åÉK</code> can be used to delete the line to the right of the text cursor.</li></ol><ol start="3"><li>Available as an alternate clipboard, <code>‚åÉK</code> and <code>‚åÉY</code> represent the kill and yank operations that let you cut and copy text without overriding your main clipboard. The clipboard they use is called the kill ring.</li></ol><ol start="4"><li><code>‚åÉT</code> is a useful command for transposing two letters that were typed out of order, by flipping the characters on each side of the text cursor.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando went first, followed by Spencer and Ben. Let's see how they did!</p>

<blockquote>4. <code>‚åÉT</code> is a useful command for transposing two letters that were typed out of order, by flipping the characters on each side of the text cursor.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://jblevins.org/log/kbd">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Available as an alternate clipboard, <code>‚åÉK</code> and <code>‚åÉY</code> represent the kill and yank operations that let you cut and copy text without overriding your main clipboard. The clipboard they use is called the kill ring.</blockquote>

<p>Fernando was doubtful and thought this one was the compiler error, but it was a <em>code completion</em> after all! <a href="https://jblevins.org/log/kbd#fn-kbd-2">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. You may know of the <code>‚åò‚å´</code> command to delete the entire line to the left of the text cursor, but <code>‚åÉK</code> can be used to delete the line to the right of the text cursor.</blockquote>

<p>This time Ben was hesitant, but this one was also a <em>code completion</em>! <a href="https://support.apple.com/en-us/HT201236">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>1.  Although the same can be done using modifier and arrow keys, the text cursor can be quickly moved to the beginning and to the end of a document by using <code>‚åÉA</code> to go to the beginning, and <code>‚åÉZ</code> to go to the end.</blockquote>

<p>‚Ä¶which Spencer doubted for all the right reasons, because it was indeed the <strong>compiler error</strong>! <code>‚åÉA</code> will go to the beginning, but the geginning or a line, not the document, and <code>‚åÉZ</code> was completemy made up. <code>‚åò‚Üë</code> and <code>‚åò‚Üì</code> can be used on the mac to go to the top and bottom of the document‚Ä¶ <a href="http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html">Learn More&nbsp;‚Üí</a></p>

<p>It turns out hat most of these bindings are <a href="https://webcache.googleusercontent.com/search?q=cache:JnfVRYsDTsMJ:https://www.hcs.harvard.edu/~jrus/site/system-bindings.html+&cd=1&hl=en&ct=clnk&gl=us&client=safari">fully customizable</a>! Check out the <a href="https://webcache.googleusercontent.com/search?q=cache:JnfVRYsDTsMJ:https://www.hcs.harvard.edu/~jrus/site/system-bindings.html+&cd=1&hl=en&ct=clnk&gl=us&client=safari">list</a> of action methods you can call to extend functionality even further.</p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Not Ph·ªü</a>. <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for ‚ÄúNot Pho‚Äù on the iOS and macOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/articles/2020/09/universal-interfaces</guid><title>Implementing Universal Interfaces</title><description>We discuss different ways of bringing an iPhone UI to the iPad, and building interfaces for universal apps.</description><link>https://codecompletion.io/articles/2020/09/universal-interfaces</link><pubDate>Wed, 2 Sep 2020 16:00:00 +0000</pubDate><content:encoded><![CDATA[<p>With the addition of Catalyst last year in macOS Catalina, it can be tempting to want to click a checkbox to make an iPhone app available for the Mac, but it is first necessary to add support for various iPad layouts if you hope your app will behave nicely in a windowed environment. This can be a more difficult process to get right than many assume, as not every iPhone layout can expand to fill a much larger space without compromising the original design choices made for the smaller screen.</p><h2>üìè Using Trait Variations and Storyboards</h2><p>The method Apple recommends is to use trait variations within a storyboard to <em>vary</em> the user interface with a different set of layout rules, or <em>constraints</em>, depending on the size of the device being used. This system will adapt the position, size, and availability of various interface elements on the app's behalf, taking care of a variety of situations, from the smallest to the largest iPhones, to multitasking on the iPad.</p><p>For instance, for a given element such as a button on screen, it can be given the full width available on a device with a <em>compact size class</em> such as an iPhone, but would be given a smaller width and moved to the side on a device with a <em>regular size class</em>, such as an iPad. This allows a variety of constraints to be set of ahead of time for a variety of devices.</p><p>Unfortunately, using trait variations in a storyboard requires that interfaces at any size be fairly similar, which can lead to one extreme being non-ideal, or worse, to a compromised interface for all screen sizes. This leads to implementations that can become quite messy and difficult to maintain.</p><h2>üóÇ Using Multiple Storyboards</h2><p>One solution that enables multiple interface layouts relatively easily is to use multiple storyboards, and choose a storyboard at launch depending on the user interface idiom, which lets the app know if it is running as an iPhone app, iPad app, or with Catalyst, a macOS app.</p><p>This is, however, not a new technique. Before storyboards became available in iOS 5, the recommendation was to have a separate interface, or <em>NIB</em>, per device type, and to switch to the corresponding interface on launch. The system would even make this automatic if you suffixed your iPad specific interface file with <code>~ipad.nib</code>, which would automatically be preferred when running on an iPad.</p><p>Unfortunately, this technique does not lend itself well to multitasking on the iPad. As an app is resized to the thinner presentations on either side of the iPad‚Äôs screen, it starts to resemble a vertically-stretched out iPhone, and can benefit from layout decisions that work better on an iPhone rather than an iPad. Unfortunately, to best take advantage of this change in layout when using multiple storyboards would be to re-build the entire interface from scratch, which is not ideal.</p><h2>üìú A Historical Note About NIBs</h2><p>A NIB, or <em>NeXT Interface Builder</em> document, is a format that encodes the position, size, attributes, and connections of various interface elements relative to one another, so that they can be loaded at runtime and connected to objects that the app is currently controlling. The format has undergone several changes since it was originally invented in the late 80s, but is ultimately still used in Storyboards to this day.</p><p>In a typical Model-View-Controller organization of an app, the NIB represents the portion that is displayed on screen, known as the <em>view</em>. In order to achieve re-usable code that could work for multiple user interfaces ‚Äî for instance pertaining to different variations of an app, or even the same interface, but in different languages with different layout considerations ‚Äî multiple NIBs would be created by the developer, but they would all be connected to the same managing object within the app, known as the <em>controller</em>.</p><p>Modern View Controllers on both iOS and macOS maintain this tradition, as their preferred way of being created, know as a <em>designated initializer</em>, reflects their preference for a localized NIB to connect to: <code>init(nibName:bundle:)</code>.</p><h2>üßÆ Programmatic Layout</h2><p>Another approach that could work well is to lay all the views out programmatically. This approach tends to work best when the number of constraints within a storyboard climbs to an amount where making any changes or tweaks becomes burdensome, but comes with the downside that the developer no longer has a visual canvas to use when editing their interface.</p><p>In fact, sometimes this is a necessary approach, especially if your interface could benefit from additional flexibility that size classes do not account for. For instance, an iPad in both landscape and portrait is considered to be a <em>regular size class</em> device, no matter the orientation, but if you wanted to take advantage of the extra width when in landscape, you would be unable to do so using only a storyboard.</p><p>This solution is not too different from the declarative nature of SwiftUI. Essentially, in <code>viewWillLayout()</code> you are given the opportunity to position all views according to the current state of the view controller. You can go further and evaluate exactly how many pixels are available for your controls, and position things accordingly.</p><h2>üèó Assembling Different Techniques</h2><p>Unfortunately, solutions that are entirely programmatic tend to be a nightmare when working with others, because without the visual reinforcement of where things are, along with the usual lack of well documented code, teammates may be intimidated to jump in and offer changes. A hybrid approach is encouraged, where individual groups of views could be laid out programmatically, but those groups are available as views configurable in a storyboard directly. Ultimately, such solutions rely on not only the app being well designed, but the code itself being architected and thoughtful as well.</p><p>Using <a href="https://codecompletion.io/articles/2020/08/compositional-layouts">compositional data sources</a> offer an alternative solution, especially when the main UI is a collection of entries that should take advantage of as much space as they can use. This can even be a solution that is more cleanly represented as code, since a storyboard would only serve to obscure the properties being set on a single view behind different panels, while the code itself is not actually doing any layout work itself: the collection view is.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-4</guid><title>Episode 4: Clocking in at 392 charact‚Ä¶</title><description>We discuss interviewing in 2020, getting acclimated to a new team while remote, and the real truth behind Test Driven Development, all with our special guest Dan Morse!</description><link>https://codecompletion.io/episodes/2020/ep-4</link><pubDate>Mon, 31 Aug 2020 15:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 4! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show! This time, we are joined by special guest, Dan Morse! Be sure to follow them on Twitter at <a href="https://twitter.com/danandami">@danandami</a>.</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>What interviews are like in 2020 when everything is remote.</li><li>How to get acclimated to a new team as a junior developer.</li><li>The pros and cons of Test Driven Development.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Invert and reduce the following if statement without introducing any new variables or statements:</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
</code><code><span class="splashkeyword">let</span> boolA, boolB, boolC: <span class="splashtype">Bool</span>
<span class="splashkeyword">let</span> intA, intB, intC: <span class="splashtype">Int</span>

<span class="splashcomment">// TODO: Invert this statement so we don't need an else block:</span>
<span class="splashkeyword">if</span> boolA &amp;&amp; !boolB || (boolC &amp;&amp; intA == intB || intC &gt; intA) {
    <span class="splashcomment">// Do Nothing</span>
} <span class="splashkeyword">else</span> {
    <span class="splashcall">print</span>(<span class="splashstring">"The condition above was not met. Do the thing!"</span>)
}

<span class="splashcomment">// !(boolA &amp;&amp; !boolB || (boolC &amp;&amp; intA == intB || intC &gt; intA))
// ... is not a solution!</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Clocking in at 392 characters, <code>encode¬≠Reprojection¬≠To¬≠Command¬≠Buffer:¬≠source¬≠Texture:¬≠previous¬≠Texture:¬≠destination¬≠Texture:¬≠previous¬≠Luminance¬≠Moments¬≠Texture:¬≠destination¬≠Luminance¬≠Moments¬≠Texture:¬≠source¬≠Texture2:¬≠previous¬≠Texture2:¬≠destination¬≠Texture2:¬≠previous¬≠Luminance¬≠Moments¬≠Texture2:¬≠destination¬≠Luminance¬≠Moments¬≠Texture2:¬≠previous¬≠Frame¬≠Count¬≠Texture:¬≠destination¬≠Frame¬≠Count¬≠Texture:¬≠motion¬≠Vector¬≠Texture:¬≠depth¬≠Normal¬≠Texture:¬≠previous¬≠Depth¬≠Normal¬≠Texture:¬≠</code> is the longest public method name as of iOS 13, and surely does something, but it‚Äôs documentation is still marked as No Overview Available.</li></ol><ol start="2"><li>The smallest on this list, <code>convolve¬≠With¬≠Destination:temp¬≠Buffer:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestX:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestY:¬≠kernel:¬≠kernel¬≠Height:¬≠kernel¬≠Width:¬≠divisor:¬≠background¬≠Color:¬≠options:¬≠</code> is one of many related Objective-C methods in the Accelerate framework for manipulating images.</li></ol><ol start="3"><li>A private Method on UIViewController, <code>attention¬≠Class¬≠Dump¬≠User:¬≠yes¬≠Its¬≠Us¬≠Again:¬≠although¬≠Swizzling¬≠And¬≠Overriding¬≠Private¬≠Methods¬≠Is¬≠Fun:¬≠it¬≠Wasnt¬≠Much¬≠Fun¬≠When¬≠Your¬≠App¬≠Stopped¬≠Working:¬≠please¬≠Refrain¬≠From¬≠Doing¬≠So¬≠In¬≠The¬≠Future¬≠Okay¬≠Thanks¬≠Bye:</code> is actually a no-op, though is used by some third party libraries.</li></ol><ol start="4"><li>Related to CarPlay, <code>init¬≠With¬≠Enable¬≠Fan:¬≠enable¬≠Air¬≠Conditioner:¬≠enable¬≠Climate¬≠Control:¬≠enable¬≠Auto¬≠Mode:¬≠air¬≠Circulation¬≠Mode:¬≠fan¬≠Speed¬≠Index:¬≠fan¬≠Speed¬≠Percentage:¬≠relative¬≠Fan¬≠Speed¬≠Setting:¬≠temperature:¬≠relative¬≠Temperature¬≠Setting:¬≠climate¬≠Zone:</code> is a public method with full online documentation, though now deprecated.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Our special guest went first, followed by Ben. Let's see how they did!</p>

<blockquote>1. Clocking in at 392 characters, <code>encode¬≠Reprojection¬≠To¬≠Command¬≠Buffer:¬≠source¬≠Texture:¬≠previous¬≠Texture:¬≠destination¬≠Texture:¬≠previous¬≠Luminance¬≠Moments¬≠Texture:¬≠destination¬≠Luminance¬≠Moments¬≠Texture:¬≠source¬≠Texture2:¬≠previous¬≠Texture2:¬≠destination¬≠Texture2:¬≠previous¬≠Luminance¬≠Moments¬≠Texture2:¬≠destination¬≠Luminance¬≠Moments¬≠Texture2:¬≠previous¬≠Frame¬≠Count¬≠Texture:¬≠destination¬≠Frame¬≠Count¬≠Texture:¬≠motion¬≠Vector¬≠Texture:¬≠depth¬≠Normal¬≠Texture:¬≠previous¬≠Depth¬≠Normal¬≠Texture:¬≠</code> is the longest public method name as of iOS 13, and surely does something, but it‚Äôs documentation is still marked as No Overview Available.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! It actually beats out second place by over 100 characters‚Ä¶ <a href="https://developer.apple.com/documentation/metalperformanceshaders/mpssvgf/3143562-encodereprojectiontocommandbuffe?language=objc">Learn&nbsp;More&nbsp;‚Üí</a> <a href="longest-method-names">More&nbsp;‚Üí</a></p>

<blockquote>2. The smallest on this list, <code>convolve¬≠With¬≠Destination:temp¬≠Buffer:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestX:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestY:¬≠kernel:¬≠kernel¬≠Height:¬≠kernel¬≠Width:¬≠divisor:¬≠background¬≠Color:¬≠options:¬≠</code> is one of many related Objective-C methods in the Accelerate framework for manipulating images.</blockquote>

<p>Everyone also thought this was true, but it was the <strong>compiler error</strong>, largely due to the fact that Accelerate is largely a C framework, meaning no such <em>Objective-C</em> method exists (though there is a <code>vImage_¬≠Error vImage¬≠Convolve_¬≠ARGB¬≠8888(...);</code>)! <a href="https://developer.apple.com/documentation/accelerate/1515923-vimageconvolve_argb8888?language=objc">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. A private Method on UIViewController, <code>attention¬≠Class¬≠Dump¬≠User:¬≠yes¬≠Its¬≠Us¬≠Again:¬≠although¬≠Swizzling¬≠And¬≠Overriding¬≠Private¬≠Methods¬≠Is¬≠Fun:¬≠it¬≠Wasnt¬≠Much¬≠Fun¬≠When¬≠Your¬≠App¬≠Stopped¬≠Working:¬≠please¬≠Refrain¬≠From¬≠Doing¬≠So¬≠In¬≠The¬≠Future¬≠Okay¬≠Thanks¬≠Bye:</code> is actually a no-op, though is used by some third party libraries.</blockquote>

<p>Dan thought this was completely made up, but it was a <em>code completion</em> after all! <a href="https://github.com/marcoarment/BugshotKit/blob/bfa7fc24760ea9315702252b05a685108787dc4e/BugshotKit/BugshotKit.m#L219">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Related to CarPlay, <code>init¬≠With¬≠Enable¬≠Fan:¬≠enable¬≠Air¬≠Conditioner:¬≠enable¬≠Climate¬≠Control:¬≠enable¬≠Auto¬≠Mode:¬≠air¬≠Circulation¬≠Mode:¬≠fan¬≠Speed¬≠Index:¬≠fan¬≠Speed¬≠Percentage:¬≠relative¬≠Fan¬≠Speed¬≠Setting:¬≠temperature:¬≠relative¬≠Temperature¬≠Setting:¬≠climate¬≠Zone:</code> is a public method with full online documentation, though now deprecated.</blockquote>

<p>‚Ä¶which Ben doubted could actually be in iOS with this level of control, but it was indeed a <em>code completion</em>‚Ä¶ <a href="https://developer.apple.com/documentation/sirikit/insetclimatesettingsincarintent/2102611-initwithenablefan?language=objc">Learn More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://www.jonnybcodes.com">JohnnyB</a>'s Bon Voyage eCommerce App course. Visit <a href="http://bon-voyage.app/course">bon-voyage.app/course</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay up to date with all his courses!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-3</guid><title>Episode 3: What's Clascal?</title><description>We discuss transitioning between Xcode toolchain versions, web development in Swift, and how to escapse tutorial hell.</description><link>https://codecompletion.io/episodes/2020/ep-3</link><pubDate>Wed, 26 Aug 2020 22:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 3! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Transitioning between Xcode toolchains when you want to use new SDK features, but still be able to compile from an older version of Xcode.</li><li>Doing web development using Swift, by making use of John Sundell's Publish and Vapor.</li><li>How to get out of tutorial hell, and what next steps a fledgling developer could take.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Review the following code ‚Äî why might some developers discourage the pattern shown below?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
</code><code><span class="splashkeyword">override func</span> tableView(<span class="splashkeyword">_</span> tableView: <span class="splashtype">UITableView</span>,
                        cellForRowAt indexPath: <span class="splashtype">IndexPath</span>) -&gt; <span class="splashtype">UITableViewCell</span> {
    <span class="splashkeyword">guard let</span> cell = tableView.<span class="splashcall">dequeueReusableCell</span>(withIdentifier: <span class="splashstring">"DateCell"</span>,
                                                   for: indexPath) <span class="splashkeyword">as</span>? <span class="splashtype">DateCell</span>
          <span class="splashkeyword">else</span> { <span class="splashkeyword">return</span> <span class="splashtype">DateCell</span>() }
    
    cell.<span class="splashproperty">date</span> = dates[indexPath.<span class="splashproperty">row</span>]
    <span class="splashkeyword">return</span> cell
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Swift started its development as far back as 2010 as an evolution of the work Apple was already doing improving the Objective-C language with features like Automatic reference counting, zeroing weak references, and blocks.</li></ol><ol start="2"><li>Available since the very first release of Mac OS X, Java bindings to Cocoa called the Java Bridge were available to help bring new developers to the fledgling operating system, though Mac OS X 10.4 was the first release to introduce many new APIs not included in the Java bindings.</li></ol><ol start="3"><li>Now at version 4.0, Objective-C was originally invented in 1984 by Brad Cox, and production versions did not even have a concept of manual reference counting as a part of the main runtime or in FoundationKit even in NeXTStep 3.0.</li></ol><ol start="4"><li>Clascal was a language Apple developed for the Lisa Workshop development system as a version of Pascal with object oriented features, and was supported in all versions of Classic Mac OS as a way to make apps using the MacApp framework, also written in Clascal.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Spencer went first, followed by Johnny and Fernando. Let's see how they did!</p>

<blockquote>1. Swift started its development as far back as 2010 as an evolution of the work Apple was already doing improving the Objective-C language with features like Automatic reference counting, zeroing weak references, and blocks.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://twitter.com/clattner_llvm/status/1284156940747042817">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Available since the very first release of Mac OS X, Java bindings to Cocoa called the Java Bridge were available to help bring new developers to the fledgling operating system, though Mac OS X 10.4 was the first release to introduce many new APIs not included in the Java bindings.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="http://mirror.informatimago.com/next/developer.apple.com/releasenotes/Cocoa/AppKitOlderNotes.html#PBNotes">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Now at version 4.0, Objective-C was originally invented in 1984 by Brad Cox, and production versions did not even have a concept of manual reference counting as a part of the main runtime or in FoundationKit even in NeXTStep 3.0.</blockquote>

<p>Almost everyone thought this was true, but Fernando had their doubts that Objective-C ever reached past version 2.0, which is absolutely did, making this a <em>code completion</em> as well! <a href="https://en.wikipedia.org/wiki/Objective-C">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://simson.net/ref/1993/NeXTSTEP3.0.pdf">More&nbsp;‚Üí</a> <a href="https://stackoverflow.com/a/15925553/1565236">More&nbsp;‚Üí</a> <a href="https://opensource.apple.com/tarballs/objc4/">More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Clascal was a language Apple developed for the Lisa Workshop development system as a version of Pascal with object oriented features, and was supported in all versions of Classic Mac OS as a way to make apps using the MacApp framework, also written in Clascal.</blockquote>

<p>‚Ä¶which both Spencer and Johnny correctly guessed was the <strong>compiler error</strong>, but only because they never heard of Clascal, which was in fact a real language Apple once used! Unfortunately, Clascal did not survive the entire Classic Mac OS era, which made it the false statement after all‚Ä¶ <a href="https://en.wikipedia.org/wiki/Object_Pascal">Learn More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/articles/2020/08/compositional-layouts</guid><title>Compositional Layouts and Diffable Data Sources</title><description>We discuss the new compositional layouts and diffable data sources instroduced in iOS 13, along with things to keep in mind when new APIs come along to seemingly replace older ones.</description><link>https://codecompletion.io/articles/2020/08/compositional-layouts</link><pubDate>Sun, 23 Aug 2020 18:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Compositional layouts and diffable data sources are a set of new APIs that were made available in iOS 13 (and augmented in iOS 14) that allow for better usability when presenting data in a Collection View or Table View. Although they can be quite the learning curve when coming from existing ways of managing <a href="https://developer.apple.com/documentation/uikit/uicollectionview"><code>UICollectionView</code></a>s and <a href="https://developer.apple.com/documentation/uikit/uitableview"><code>UITableView</code></a>s up until now (mostly since the new APIs require a change of mentality to truly be productive with them), they do enable simpler and more expressive code when fully embraced. That said, they do not replace any of the older techniques that are still available, but rather enhance them in ways that enable modern layouts without the same amount of custom work that would have been needed previously.</p><h2>üóÑ What is a Data Source?</h2><p>In the traditional setup for either a collection view or a table view, you have the interface element or <em>view</em> itself that presents all the entries (known as <em>cells</em>) that you see on screen, along with the data that backs up those cells. The way it used to work, you would have needed a collection of elements or <em>model objects</em> ‚Äî for instance a bunch of people in a contacts app, or menu items in a restaurant‚Äôs ordering app ‚Äî that you ultimately wanted to present on screen. This was done via a special object known as a <em>data source</em>, that was contacted by the collection or table view anytime it was ready to display more cells as the user interacted with it.</p><p>Achieved by conforming the data source to the <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdatasource"><code>UICollectionViewDataSource</code></a> or <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource"><code>UITableViewDataSource</code></a> protocols (you might even make use of the <em>delegate</em> protocols <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdelegate"><code>UICollectionViewDelegate</code></a> and <a href="https://developer.apple.com/documentation/uikit/uitableviewdelegate"><code>UITableViewDelegate</code></a> as well), this indicated that the object could "speak" the same language, or <em>protocol</em>, that the collection or table view expected. Ultimately, the collection or table view could then ask its data source to indicate how many cells there are, along with which entry should be displayed for which cell, but could also ask its delegate to perform an action when that cell was interacted with by the user. This paradigm has been available since <code>UITableView</code> and <code>UICollectionView</code> were originally introduced, and even long before iOS was even available: on the Mac.</p><p>This paradigm works well for highly regular content, but as soon as you have a lot of dynamic reorganization or a custom layout, you‚Äôll start running into problems. You may have even seen such errors: ‚Äúbefore the insertion or deletion, there were this many cells, and after the event, there were those many cells‚Äù; meanwhile the actual number that should have existed was some other third value. This is a collection or table view‚Äôs way of telling the developer something went wrong with how they managed the insertion or deletion of those cells, usually followed by a crash.</p><p>When such a thing happens in Xcode, you get a big error so you can find and fix it, but if you are a user out in the wild, the app will just close instantly, without warning. Ultimately, the solution is probably related to the order cells were added or removed, or maybe a step was forgotten; that said, the model layer and the view layer need to be in sync, and if they are not, this entire crop of issues tends to show up.</p><h2>üîÄ Diffable Data Sources</h2><p>One of the ways Apple has tried to solve this issue for developers is to take some of that work and make it the responsibility of the model to manage, using a new type of data source called a <a href="https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasource">diffable data source</a>. One of the necessary steps is to make entries both <a href="https://developer.apple.com/documentation/swift/identifiable"><code>Identifiable</code></a> and <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a>, which allows each model object to indicate if it is related to any other previous instance of the same entry (<em>Identifiable</em>), and if they are, to go one step further and see if they changed since the last time they were displayed (<em>Hashable</em>). The collection or table view can then do a much better job of knowing which model goes with which cell, and if you insert or delete them, or move and reorder them, the view can be smarter about making those changes, without the app's data source needing to do as much manual bookkeeping.</p><p>Before diffable data sources, to move a cell on screen the controller (an object coordinating the views and the model, and often was the data source itself) would have had to delete the cell from where it was, and would then create a brand new cell in a new position (using what's called an <em>index path</em>), telling the view about the change. However, if the controller didn't indicate those changes in exactly the right order, problems would crop up. Using diffable data sources allows the developer to express their interests a bit more fluidly, essentially by setting the data source to exist in a particular state, and asking it to figure out where it is now and what it will become by differentiating, or <em>diffing</em>, between the two before and after, animating those changes automatically. This is where the ‚Äúdiffable‚Äù comes from in ‚Äúdiffable data sources‚Äù.</p><h2>üì∞ Compositional Layouts</h2><p>A companion technology to diffable data sources, <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout">compositional layouts</a> allow you to create complex visual interactions between cells. For instance, in the App Store app you might sometimes notice large cards, but other times there will be a smaller table view within one of those cards, or even a section that scrolls vertically. Traditionally, this sort of layout would be very difficult to implement ‚Äî a developer might even end up embedding a <code>UITableView</code> inside a <code>UICollectionView</code>'s cell, causing the entire layout to be very difficult to manage.</p><p>With compositional layouts, an iOS developer can design their layout in a way that is not too different than styling <code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> tags in CSS, where a group of cells could be set to scroll horizontally, while others would scroll vertically (this is called <em>orthogonal scrolling</em>) ‚Äî the cells could even be configured to take up different amounts of space on screen! This allows the developer to create lots of very rich and interesting combinations of layouts that would have otherwise been tedious to implement.</p><h2>ü§ù Benefits All Around</h2><p>When using a diffable data source, the first thing you may notice is that animations between cells are now nearly automatic, because each model instance is individually hashed and indexed by the framework. This is because snapshots between the old data set and the new data set can be determined really efficiently without storing the entire model multiple times. Whenever you are ready, you can apply a new snapshot on the data source, and indicate if you want it animated or not, and like magic, everything will move to where it needs to move ‚Äî meaning if a snapshot moves a cell from one section to another, the table view will detect that and animate that movement; the same goes for deletions or insertions.</p><p>Without a diffable data source, a simple method of using collection and table views <em>was</em> available ‚Äî specifically the catch all method of <code>reloadData()</code>, which would tell the view that it should update itself and ask the data source for the most up to date representation of the entries. However, this was without any transitions or smooth animations. Not to mention, it would reload everything, even the parts that didn‚Äôt change, which could be inefficient.</p><p>Compositional layouts on the other hand, make layouts like those seen in the App Store or Netflix apps so much easier to implement, with much less code, and thus less of a headache for the developer. Combined with a diffable data source, managing this data becomes conceptually possible to revisit and maintain over time.</p><h2>üîú Where This Will Lead</h2><p>Although these are just a few of the new <code>UITableView</code> and <code>UICollectionView</code> APIs introduced with iOS 13, they are likely to make more complex and interactive layouts the standard going forward, specifically because they make them <em>less complex</em> to deal with. Unfortunately for older apps, they would need to wait until they can safely start requiring iOS 13 and newer, as these APIs were unavailable up until then.</p><p>The old APIs exist mainly because computers and phones weren‚Äôt aways as fast as they are today, so to save calculation time, the app would keep track of changes as they were being made, ultimately letting the view know about any changes once the user returned to it. Now that processors are so much faster and efficient, an app can easily burn through a few extra cycles doing this calculation after the fact, and only when needed, by using a framework-provided algorithm that is heavily optimized, and get the results in a way that is easily conveyed to the collection or table view.</p><p>If you are interested in learning more about these APIs, check out Apple‚Äôs <a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views">sample code</a> on both of these topics, which contains tons of examples of really cool screens you can make using these new technologies. The sample code was just updated for iOS 14 since WWDC was not too long ago, so be sure to have the latest beta version of Xcode 12 downloaded if you would like to play around with them.</p><h2>üß∞ Alternative Data Source Paradigms</h2><p>Somewhat curiously, the Mac has had different paradigms for representing a data source long before iOS was ever a thing. Specifically, <a href="https://developer.apple.com/documentation/appkit/nsoutlineview"><code>NSOutlineView</code></a>, a subclass of <a href="https://developer.apple.com/documentation/appkit/nstableview"><code>NSTableView</code></a>, actually asks for an array of contents for a given item, and recursively asks for the children of those items as they become necessary when a row is expanded, without dealing with many of the complexities discussed previously. The Finder, for instance, uses this paradigm to represent files and folders inside of other folders, allowing for lots of data to be shown, just not all at once. This is actually a similar design to what diffable data sources offer, so it's interesting that the model that <code>NSOutlineView</code> uses never directly made the jump to iOS, only to be re-implemented from scratch in a much improved way.</p><h2>‚ú® On the New and Shiny</h2><p>Just because these new technologies exist, however, doesn‚Äôt mean you absolutely have to use them. Together, they represent a collection of tools, some of which work better than others depending on the situations being asked of them, so it‚Äôs important to use the tool that allows you to build what you want to build. For instance, as soon as <code>UICollectionView</code> came out several years ago, a discussion immediately precipitated around the eventual demise of <code>UITableView</code>. With iOS 14‚Äôs introduction of the List type for collection views, those discussions were reignited, now that you can essentially build a table view, and more, with only a collection view.</p><p>However, it‚Äôs important to remember that these APIs represent increasingly complicated ways of representing your data. If all you need is a simple list, then there is no need to go through the extra effort of implementing that list in a <code>UICollectionView</code> if you know it‚Äôll only ever be a list ‚Äî the API will be simpler to work with, and you‚Äôll have to jump through less hoops in the process. If you do eventually want to upgrade, the paradigms between them are simple enough that the transition from <code>UITableView</code> to <code>UICollectionView</code> with the same layout should only require minimal changes.</p><p>Planning ahead of time can save you transitions in the long run. For instance, if you know that you will want to transition between different view layouts, for instance between rows of rectangles and a grid of squares, then a collection view may make for a better starting point, since you‚Äôll be targeting a specific conclusion right from the beginning.</p><p>As a side note, when collection views were released, the underlying implementation of table views was actually swapped out with a shared implementation, simply because collection views are a natural super set of table views. That said, it's important to remember that if you really wanted, you could implement the same functionality <a href="https://github.com/mochidev/MDSpreadViewDemo">completely from scratch</a>, as there is very little magic actually happening behind the scenes, just carefully crafted and optimized algorithms.</p><p>Ultimately though, if you do find yourself having written something completely from scratch only to find out Apple released a new API that supersedes it, it‚Äôs likely a good idea to move over to that API as soon as you can, as it will likely be maintained on your behalf, letting you focus on the parts of your app that make it unique, rather than working on aspects that would better fit within a framework.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-2</guid><title>Episode 2: Available in Human Sizes</title><description>We discuss the benefits of finding your niche and specializing when looking for new opportunities, and what would happen if we considered the App Store to be simply a provider, much like an ISP.</description><link>https://codecompletion.io/episodes/2020/ep-2</link><pubDate>Mon, 17 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 2! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Finding your niche and the benefits in specializing when looking for new opportunities.</li><li>How beneficial would it be to consider the App Store as simply a provider, much like an ISP.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Can you explain what is wrong with the following code, how it can break, and show how to fix it?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
</code><code><span class="splashkeyword">struct</span> Person {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span>
    <span class="splashkeyword">var</span> age: <span class="splashtype">Double</span>
}

<span class="splashkeyword">let</span> person = <span class="splashcall">askForPerson</span>()
<span class="splashtype">NSLog</span>(<span class="splashstring">"</span>\(person.<span class="splashproperty">name</span>) <span class="splashstring">is %.2f years old today!"</span>, person.<span class="splashproperty">age</span>)
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</li></ol><ol start="2"><li>Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</li></ol><ol start="3"><li>Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</li></ol><ol start="4"><li>Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben had the misfortune of going first again to show the others the ropes, followed by Fernando and Johnny. Let's check how they did!</p>

<blockquote>4. Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</blockquote>

<p>Johnny doubted this product ever existed and was the compiler error, but unfortunately it was a <em>code completion</em>! <a href="https://www.apple.com/newsroom/2006/01/10Apple-Announces-the-iPod-Radio-Remote/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</blockquote>

<p>Fernando fumbled last minute and chose this as the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_QuickTake">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</blockquote>

<p>Everyone thought this was true, but it was in fact the <strong>compiler error</strong>, since iPod socks were not only available for sale for nearly a decade, but were unfortunately never available in human sizes‚Ä¶ <a href="https://appleinsider.com/articles/12/09/26/apple-removes-ipod-socks-from-online-store">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</blockquote>

<p>‚Ä¶which Ben thought was a bit too outlandish, was still a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_410_Color_Plotter">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Mystiko</a>. <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Mystiko on the iMessage App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-1</guid><title>Episode 1: File, New, New Project‚Ä¶</title><description>We discuss how to layout your UI using compositional layouts and diffable data sources, different ways to bring an iPhone UI to the iPad, and ways Apple could make the App Store a better place for both developers and users.</description><link>https://codecompletion.io/episodes/2020/ep-1</link><pubDate>Mon, 10 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>How to layout your UI using compositional layouts and diffable data sources.</li><li>Different ways to bring an iPhone UI to the iPad.</li><li>Ways Apple could make the App Store a better place for both developers and users.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Without using a variable as a flag, how can you skip to the next iteration of an outer loop, from inside an inner loop?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
</code><code><span class="splashkeyword">for</span> row <span class="splashkeyword">in</span> rows {
    <span class="splashkeyword">for</span> column <span class="splashkeyword">in</span> columns {
        <span class="splashkeyword">if</span> column.<span class="splashproperty">shouldSkipToNextRow</span> {
            <span class="splashcomment">// how do you get to the next row?</span>
        }
    }
    <span class="splashcall">finishUpRow</span>(row)
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Apple III.</li></ol><ol start="2"><li>Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</li></ol><ol start="3"><li>Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</li></ol><ol start="4"><li>Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben went first, followed by Spencer. Let's check how they did!</p>

<blockquote>4. Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Shift_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</blockquote>

<p>Spencer thought this was true, while Ben thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Control_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</blockquote>

<p>Spencer thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Macintosh introduced in 1984, though the command key itself was present on the Apple III introduced in 1980, but it was represented by an open Apple logo instead.</blockquote>

<p>is in fact the <strong>compiler error</strong>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item></channel></rss>