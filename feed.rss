<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>CodeCompletion.io</title><description>We are a group of developers and educators specializing in Apple Platform development, here to try something new.

New content coming out every Friday.</description><link>https://codecompletion.io</link><language>en</language><lastBuildDate>Fri, 11 Sep 2020 17:02:56 +0000</lastBuildDate><pubDate>Fri, 11 Sep 2020 17:02:56 +0000</pubDate><ttl>250</ttl><atom:link href="https://codecompletion.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-5</guid><title>Episode 5: Emacs Should Die a Fiery Death</title><description>We discuss when to rewrite your code or tackle technical dept, introduce the world to documentation driven development, and discuss why the lack of good documentation may be hurting juniors trying to get established.</description><link>https://codecompletion.io/episodes/2020/ep-5</link><pubDate>Tue, 8 Sep 2020 16:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 5! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>When to rewrite a project from scratch, when to buckle down and conquer technical debt, and when to do a little something in between.</li><li>The importance of documenting code, and how the lack of documentation stifles newcomers from becoming established developers.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Review the following code ‚Äî what might the developer have overlooked?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</code><code><span class="splashkeyword">class</span> DateCell: <span class="splashtype">UITableViewCell</span> {
    
    <span class="splashkeyword">private static let</span> dateFormatter: <span class="splashtype">DateFormatter</span> = {
        <span class="splashkeyword">let</span> dateFormatter = <span class="splashtype">DateFormatter</span>()
        dateFormatter.<span class="splashproperty">dateFormat</span> = <span class="splashstring">"YYYY-MM-dd"</span>
        <span class="splashkeyword">return</span> dateFormatter
    }()
    
    <span class="splashkeyword">var</span> date: <span class="splashtype">Date</span>? {
        <span class="splashkeyword">didSet</span> {
            <span class="splashkeyword">switch</span> date {
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">some</span>(<span class="splashkeyword">let</span> date):
                textLabel?.<span class="splashproperty">text</span> = <span class="splashtype">Self</span>.<span class="splashproperty">dateFormatter</span>.<span class="splashcall">string</span>(from: date)
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">none</span>:
                textLabel?.<span class="splashproperty">text</span> = <span class="splashstring">"N/A"</span>
            }
        }
    }
    
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Although the same can be done using modifier and arrow keys, the text cursor can be quickly moved to the beginning and to the end of a document by using <code>‚åÉA</code> to go to the beginning, and <code>‚åÉZ</code> to go to the end.</li></ol><ol start="2"><li>You may know of the <code>‚åò‚å´</code> command to delete the entire line to the left of the text cursor, but <code>‚åÉK</code> can be used to delete the line to the right of the text cursor.</li></ol><ol start="3"><li>Available as an alternate clipboard, <code>‚åÉK</code> and <code>‚åÉY</code> represent the kill and yank operations that let you cut and copy text without overriding your main clipboard. The clipboard they use is called the kill ring.</li></ol><ol start="4"><li><code>‚åÉT</code> is a useful command for transposing two letters that were typed out of order, by flipping the characters on each side of the text cursor.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>This time, Fernando wend first, followed by Spencer and Ben. Let's see how they did!</p>

<blockquote>4. <code>‚åÉT</code> is a useful command for transposing two letters that were typed out of order, by flipping the characters on each side of the text cursor.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://jblevins.org/log/kbd">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Available as an alternate clipboard, <code>‚åÉK</code> and <code>‚åÉY</code> represent the kill and yank operations that let you cut and copy text without overriding your main clipboard. The clipboard they use is called the kill ring.</blockquote>

<p>Fernando was doubtful and thought this one was the compiler error, but it was a <em>code completion</em> after all! <a href="https://jblevins.org/log/kbd#fn-kbd-2">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. You may know of the <code>‚åò‚å´</code> command to delete the entire line to the left of the text cursor, but <code>‚åÉK</code> can be used to delete the line to the right of the text cursor.</blockquote>

<p>This time Ben was hesitant, but this one was also a <em>code completion</em>! <a href="https://support.apple.com/en-us/HT201236">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>1.  Although the same can be done using modifier and arrow keys, the text cursor can be quickly moved to the beginning and to the end of a document by using <code>‚åÉA</code> to go to the beginning, and <code>‚åÉZ</code> to go to the end.</blockquote>

<p>‚Ä¶which Spencer doubted for all the right reasons, because it was indeed the <strong>compiler error</strong>! <code>‚åÉA</code> will go to the beginning, but the geginning or a line, not the document, and <code>‚åÉZ</code> was completemy made up. <code>‚åò‚Üë</code> and <code>‚åò‚Üì</code> can be used on the mac to go to the top and bottom of the document‚Ä¶ <a href="http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html">Learn More&nbsp;‚Üí</a></p>

<p>It turns out hat most of these bindings are <a href="https://webcache.googleusercontent.com/search?q=cache:JnfVRYsDTsMJ:https://www.hcs.harvard.edu/~jrus/site/system-bindings.html+&cd=1&hl=en&ct=clnk&gl=us&client=safari">fully customizable</a>! Check out the <a href="https://webcache.googleusercontent.com/search?q=cache:JnfVRYsDTsMJ:https://www.hcs.harvard.edu/~jrus/site/system-bindings.html+&cd=1&hl=en&ct=clnk&gl=us&client=safari">list</a> of action methods you can call to extend functionality even further.</p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Not Ph·ªü</a>. <a href="https://apps.apple.com/app/apple-store/id1525104124?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for ‚ÄúNot Pho‚Äù on the iOS and macOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/articles/2020/09/universal-interfaces</guid><title>Implementing Universal Interfaces</title><description>We discuss different ways of bringing an iPhone UI to the iPad, and building interfaces for universal apps.</description><link>https://codecompletion.io/articles/2020/09/universal-interfaces</link><pubDate>Wed, 2 Sep 2020 16:00:00 +0000</pubDate><content:encoded><![CDATA[<p>With the addition of Catalyst last year in macOS Catalina, it can be tempting to want to click a checkbox to make an iPhone app available for the Mac, but it is first necessary to add support for various iPad layouts if you hope your app will behave nicely in a windowed environment. This can be a more difficult process to get right than many assume, as not every iPhone layout can expand to fill a much larger space without compromising the original design choices made for the smaller screen.</p><h2>üìè Using Trait Variations and Storyboards</h2><p>The method Apple recommends is to use trait variations within a storyboard to <em>vary</em> the user interface with a different set of layout rules, or <em>constraints</em>, depending on the size of the device being used. This system will adapt the position, size, and availability of various interface elements on the app's behalf, taking care of a variety of situations, from the smallest to the largest iPhones, to multitasking on the iPad.</p><p>For instance, for a given element such as a button on screen, it can be given the full width available on a device with a <em>compact size class</em> such as an iPhone, but would be given a smaller width and moved to the side on a device with a <em>regular size class</em>, such as an iPad. This allows a variety of constraints to be set of ahead of time for a variety of devices.</p><p>Unfortunately, using trait variations in a storyboard requires that interfaces at any size be fairly similar, which can lead to one extreme being non-ideal, or worse, to a compromised interface for all screen sizes. This leads to implementations that can become quite messy and difficult to maintain.</p><h2>üóÇ Using Multiple Storyboards</h2><p>One solution that enables multiple interface layouts relatively easily is to use multiple storyboards, and choose a storyboard at launch depending on the user interface idiom, which lets the app know if it is running as an iPhone app, iPad app, or with Catalyst, a macOS app.</p><p>This is, however, not a new technique. Before storyboards became available in iOS 5, the recommendation was to have a separate interface, or <em>NIB</em>, per device type, and to switch to the corresponding interface on launch. The system would even make this automatic if you suffixed your iPad specific interface file with <code>~ipad.nib</code>, which would automatically be preferred when running on an iPad.</p><p>Unfortunately, this technique does not lend itself well to multitasking on the iPad. As an app is resized to the thinner presentations on either side of the iPad‚Äôs screen, it starts to resemble a vertically-stretched out iPhone, and can benefit from layout decisions that work better on an iPhone rather than an iPad. Unfortunately, to best take advantage of this change in layout when using multiple storyboards would be to re-build the entire interface from scratch, which is not ideal.</p><h2>üìú A Historical Note About NIBs</h2><p>A NIB, or <em>NeXT Interface Builder</em> document, is a format that encodes the position, size, attributes, and connections of various interface elements relative to one another, so that they can be loaded at runtime and connected to objects that the app is currently controlling. The format has undergone several changes since it was originally invented in the late 80s, but is ultimately still used in Storyboards to this day.</p><p>In a typical Model-View-Controller organization of an app, the NIB represents the portion that is displayed on screen, known as the <em>view</em>. In order to achieve re-usable code that could work for multiple user interfaces ‚Äî for instance pertaining to different variations of an app, or even the same interface, but in different languages with different layout considerations ‚Äî multiple NIBs would be created by the developer, but they would all be connected to the same managing object within the app, known as the <em>controller</em>.</p><p>Modern View Controllers on both iOS and macOS maintain this tradition, as their preferred way of being created, know as a <em>designated initializer</em>, reflects their preference for a localized NIB to connect to: <code>init(nibName:bundle:)</code>.</p><h2>üßÆ Programmatic Layout</h2><p>Another approach that could work well is to lay all the views out programmatically. This approach tends to work best when the number of constraints within a storyboard climbs to an amount where making any changes or tweaks becomes burdensome, but comes with the downside that the developer no longer has a visual canvas to use when editing their interface.</p><p>In fact, sometimes this is a necessary approach, especially if your interface could benefit from additional flexibility that size classes do not account for. For instance, an iPad in both landscape and portrait is considered to be a <em>regular size class</em> device, no matter the orientation, but if you wanted to take advantage of the extra width when in landscape, you would be unable to do so using only a storyboard.</p><p>This solution is not too different from the declarative nature of SwiftUI. Essentially, in <code>viewWillLayout()</code> you are given the opportunity to position all views according to the current state of the view controller. You can go further and evaluate exactly how many pixels are available for your controls, and position things accordingly.</p><h2>üèó Assembling Different Techniques</h2><p>Unfortunately, solutions that are entirely programmatic tend to be a nightmare when working with others, because without the visual reinforcement of where things are, along with the usual lack of well documented code, teammates may be intimidated to jump in and offer changes. A hybrid approach is encouraged, where individual groups of views could be laid out programmatically, but those groups are available as views configurable in a storyboard directly. Ultimately, such solutions rely on not only the app being well designed, but the code itself being architected and thoughtful as well.</p><p>Using <a href="https://codecompletion.io/articles/2020/08/compositional-layouts">compositional data sources</a> offer an alternative solution, especially when the main UI is a collection of entries that should take advantage of as much space as they can use. This can even be a solution that is more cleanly represented as code, since a storyboard would only serve to obscure the properties being set on a single view behind different panels, while the code itself is not actually doing any layout work itself: the collection view is.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-4</guid><title>Episode 4: Clocking in at 392 charact‚Ä¶</title><description>We discuss interviewing in 2020, getting acclimated to a new team while remote, and the real truth behind Test Driven Development, all with our special guest Dan Morse!</description><link>https://codecompletion.io/episodes/2020/ep-4</link><pubDate>Mon, 31 Aug 2020 15:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 4! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show! This time, we are joined by special guest, Dan Morse! Be sure to follow them on Twitter at <a href="https://twitter.com/danandami">@danandami</a>.</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>What interviews are like in 2020 when everything is remote.</li><li>How to get acclimated to a new team as a junior developer.</li><li>The pros and cons of Test Driven Development.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Invert and reduce the following if statement without introducing any new variables or statements:</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
10
11
12
</code><code><span class="splashkeyword">let</span> boolA, boolB, boolC: <span class="splashtype">Bool</span>
<span class="splashkeyword">let</span> intA, intB, intC: <span class="splashtype">Int</span>

<span class="splashcomment">// TODO: Invert this statement so we don't need an else block:</span>
<span class="splashkeyword">if</span> boolA &amp;&amp; !boolB || (boolC &amp;&amp; intA == intB || intC &gt; intA) {
    <span class="splashcomment">// Do Nothing</span>
} <span class="splashkeyword">else</span> {
    <span class="splashcall">print</span>(<span class="splashstring">"The condition above was not met. Do the thing!"</span>)
}

<span class="splashcomment">// !(boolA &amp;&amp; !boolB || (boolC &amp;&amp; intA == intB || intC &gt; intA))
// ... is not a solution!</span>
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Clocking in at 392 characters, <code>encode¬≠Reprojection¬≠To¬≠Command¬≠Buffer:¬≠source¬≠Texture:¬≠previous¬≠Texture:¬≠destination¬≠Texture:¬≠previous¬≠Luminance¬≠Moments¬≠Texture:¬≠destination¬≠Luminance¬≠Moments¬≠Texture:¬≠source¬≠Texture2:¬≠previous¬≠Texture2:¬≠destination¬≠Texture2:¬≠previous¬≠Luminance¬≠Moments¬≠Texture2:¬≠destination¬≠Luminance¬≠Moments¬≠Texture2:¬≠previous¬≠Frame¬≠Count¬≠Texture:¬≠destination¬≠Frame¬≠Count¬≠Texture:¬≠motion¬≠Vector¬≠Texture:¬≠depth¬≠Normal¬≠Texture:¬≠previous¬≠Depth¬≠Normal¬≠Texture:¬≠</code> is the longest public method name as of iOS 13, and surely does something, but it‚Äôs documentation is still marked as No Overview Available.</li></ol><ol start="2"><li>The smallest on this list, <code>convolve¬≠With¬≠Destination:temp¬≠Buffer:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestX:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestY:¬≠kernel:¬≠kernel¬≠Height:¬≠kernel¬≠Width:¬≠divisor:¬≠background¬≠Color:¬≠options:¬≠</code> is one of many related Objective-C methods in the Accelerate framework for manipulating images.</li></ol><ol start="3"><li>A private Method on UIViewController, <code>attention¬≠Class¬≠Dump¬≠User:¬≠yes¬≠Its¬≠Us¬≠Again:¬≠although¬≠Swizzling¬≠And¬≠Overriding¬≠Private¬≠Methods¬≠Is¬≠Fun:¬≠it¬≠Wasnt¬≠Much¬≠Fun¬≠When¬≠Your¬≠App¬≠Stopped¬≠Working:¬≠please¬≠Refrain¬≠From¬≠Doing¬≠So¬≠In¬≠The¬≠Future¬≠Okay¬≠Thanks¬≠Bye:</code> is actually a no-op, though is used by some third party libraries.</li></ol><ol start="4"><li>Related to CarPlay, <code>init¬≠With¬≠Enable¬≠Fan:¬≠enable¬≠Air¬≠Conditioner:¬≠enable¬≠Climate¬≠Control:¬≠enable¬≠Auto¬≠Mode:¬≠air¬≠Circulation¬≠Mode:¬≠fan¬≠Speed¬≠Index:¬≠fan¬≠Speed¬≠Percentage:¬≠relative¬≠Fan¬≠Speed¬≠Setting:¬≠temperature:¬≠relative¬≠Temperature¬≠Setting:¬≠climate¬≠Zone:</code> is a public method with full online documentation, though now deprecated.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Our special guest went first, followed by Ben. Let's see how they did!</p>

<blockquote>1. Clocking in at 392 characters, <code>encode¬≠Reprojection¬≠To¬≠Command¬≠Buffer:¬≠source¬≠Texture:¬≠previous¬≠Texture:¬≠destination¬≠Texture:¬≠previous¬≠Luminance¬≠Moments¬≠Texture:¬≠destination¬≠Luminance¬≠Moments¬≠Texture:¬≠source¬≠Texture2:¬≠previous¬≠Texture2:¬≠destination¬≠Texture2:¬≠previous¬≠Luminance¬≠Moments¬≠Texture2:¬≠destination¬≠Luminance¬≠Moments¬≠Texture2:¬≠previous¬≠Frame¬≠Count¬≠Texture:¬≠destination¬≠Frame¬≠Count¬≠Texture:¬≠motion¬≠Vector¬≠Texture:¬≠depth¬≠Normal¬≠Texture:¬≠previous¬≠Depth¬≠Normal¬≠Texture:¬≠</code> is the longest public method name as of iOS 13, and surely does something, but it‚Äôs documentation is still marked as No Overview Available.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! It actually beats out second place by over 100 characters‚Ä¶ <a href="https://developer.apple.com/documentation/metalperformanceshaders/mpssvgf/3143562-encodereprojectiontocommandbuffe?language=objc">Learn&nbsp;More&nbsp;‚Üí</a> <a href="longest-method-names">More&nbsp;‚Üí</a></p>

<blockquote>2. The smallest on this list, <code>convolve¬≠With¬≠Destination:temp¬≠Buffer:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestX:¬≠source¬≠Offset¬≠To¬≠Region¬≠Of¬≠InterestY:¬≠kernel:¬≠kernel¬≠Height:¬≠kernel¬≠Width:¬≠divisor:¬≠background¬≠Color:¬≠options:¬≠</code> is one of many related Objective-C methods in the Accelerate framework for manipulating images.</blockquote>

<p>Everyone also thought this was true, but it was the <strong>compiler error</strong>, largely due to the fact that Accelerate is largely a C framework, meaning no such <em>Objective-C</em> method exists (though there is a <code>vImage_¬≠Error vImage¬≠Convolve_¬≠ARGB¬≠8888(...);</code>)! <a href="https://developer.apple.com/documentation/accelerate/1515923-vimageconvolve_argb8888?language=objc">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. A private Method on UIViewController, <code>attention¬≠Class¬≠Dump¬≠User:¬≠yes¬≠Its¬≠Us¬≠Again:¬≠although¬≠Swizzling¬≠And¬≠Overriding¬≠Private¬≠Methods¬≠Is¬≠Fun:¬≠it¬≠Wasnt¬≠Much¬≠Fun¬≠When¬≠Your¬≠App¬≠Stopped¬≠Working:¬≠please¬≠Refrain¬≠From¬≠Doing¬≠So¬≠In¬≠The¬≠Future¬≠Okay¬≠Thanks¬≠Bye:</code> is actually a no-op, though is used by some third party libraries.</blockquote>

<p>Dan thought this was completely made up, but it was a <em>code completion</em> after all! <a href="https://github.com/marcoarment/BugshotKit/blob/bfa7fc24760ea9315702252b05a685108787dc4e/BugshotKit/BugshotKit.m#L219">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Related to CarPlay, <code>init¬≠With¬≠Enable¬≠Fan:¬≠enable¬≠Air¬≠Conditioner:¬≠enable¬≠Climate¬≠Control:¬≠enable¬≠Auto¬≠Mode:¬≠air¬≠Circulation¬≠Mode:¬≠fan¬≠Speed¬≠Index:¬≠fan¬≠Speed¬≠Percentage:¬≠relative¬≠Fan¬≠Speed¬≠Setting:¬≠temperature:¬≠relative¬≠Temperature¬≠Setting:¬≠climate¬≠Zone:</code> is a public method with full online documentation, though now deprecated.</blockquote>

<p>‚Ä¶which Ben doubted could actually be in iOS with this level of control, but it was indeed a <em>code completion</em>‚Ä¶ <a href="https://developer.apple.com/documentation/sirikit/insetclimatesettingsincarintent/2102611-initwithenablefan?language=objc">Learn More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://www.jonnybcodes.com">JohnnyB</a>'s Bon Voyage eCommerce App course. Visit <a href="http://bon-voyage.app/course">bon-voyage.app/course</a> and be sure to follow Bon Voyage's instructor <a href="https://twitter.com/jonnybcodes">@jonnybcodes</a> on Twitter to learn more and stay up to date with all his courses!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-3</guid><title>Episode 3: What's Clascal?</title><description>We discuss transitioning between Xcode toolchain versions, web development in Swift, and how to escapse tutorial hell.</description><link>https://codecompletion.io/episodes/2020/ep-3</link><pubDate>Wed, 26 Aug 2020 22:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 3! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Transitioning between Xcode toolchains when you want to use new SDK features, but still be able to compile from an older version of Xcode.</li><li>Doing web development using Swift, by making use of John Sundell's Publish and Vapor.</li><li>How to get out of tutorial hell, and what next steps a fledgling developer could take.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Review the following code ‚Äî why might some developers discourage the pattern shown below?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
9
</code><code><span class="splashkeyword">override func</span> tableView(<span class="splashkeyword">_</span> tableView: <span class="splashtype">UITableView</span>,
                        cellForRowAt indexPath: <span class="splashtype">IndexPath</span>) -&gt; <span class="splashtype">UITableViewCell</span> {
    <span class="splashkeyword">guard let</span> cell = tableView.<span class="splashcall">dequeueReusableCell</span>(withIdentifier: <span class="splashstring">"DateCell"</span>,
                                                   for: indexPath) <span class="splashkeyword">as</span>? <span class="splashtype">DateCell</span>
          <span class="splashkeyword">else</span> { <span class="splashkeyword">return</span> <span class="splashtype">DateCell</span>() }
    
    cell.<span class="splashproperty">date</span> = dates[indexPath.<span class="splashproperty">row</span>]
    <span class="splashkeyword">return</span> cell
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Swift started its development as far back as 2010 as an evolution of the work Apple was already doing improving the Objective-C language with features like Automatic reference counting, zeroing weak references, and blocks.</li></ol><ol start="2"><li>Available since the very first release of Mac OS X, Java bindings to Cocoa called the Java Bridge were available to help bring new developers to the fledgling operating system, though Mac OS X 10.4 was the first release to introduce many new APIs not included in the Java bindings.</li></ol><ol start="3"><li>Now at version 4.0, Objective-C was originally invented in 1984 by Brad Cox, and production versions did not even have a concept of manual reference counting as a part of the main runtime or in FoundationKit even in NeXTStep 3.0.</li></ol><ol start="4"><li>Clascal was a language Apple developed for the Lisa Workshop development system as a version of Pascal with object oriented features, and was supported in all versions of Classic Mac OS as a way to make apps using the MacApp framework, also written in Clascal.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Spencer went first, followed by Johnny and Fernando. Let's see how they did!</p>

<blockquote>1. Swift started its development as far back as 2010 as an evolution of the work Apple was already doing improving the Objective-C language with features like Automatic reference counting, zeroing weak references, and blocks.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://twitter.com/clattner_llvm/status/1284156940747042817">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Available since the very first release of Mac OS X, Java bindings to Cocoa called the Java Bridge were available to help bring new developers to the fledgling operating system, though Mac OS X 10.4 was the first release to introduce many new APIs not included in the Java bindings.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="http://mirror.informatimago.com/next/developer.apple.com/releasenotes/Cocoa/AppKitOlderNotes.html#PBNotes">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Now at version 4.0, Objective-C was originally invented in 1984 by Brad Cox, and production versions did not even have a concept of manual reference counting as a part of the main runtime or in FoundationKit even in NeXTStep 3.0.</blockquote>

<p>Almost everyone thought this was true, but Fernando had their doubts that Objective-C ever reached past version 2.0, which is absolutely did, making this a <em>code completion</em> as well! <a href="https://en.wikipedia.org/wiki/Objective-C">Learn&nbsp;More&nbsp;‚Üí</a> <a href="https://simson.net/ref/1993/NeXTSTEP3.0.pdf">More&nbsp;‚Üí</a> <a href="https://stackoverflow.com/a/15925553/1565236">More&nbsp;‚Üí</a> <a href="https://opensource.apple.com/tarballs/objc4/">More&nbsp;‚Üí</a></p>

<p>Which leaves‚Ä¶</p>

<blockquote>4. Clascal was a language Apple developed for the Lisa Workshop development system as a version of Pascal with object oriented features, and was supported in all versions of Classic Mac OS as a way to make apps using the MacApp framework, also written in Clascal.</blockquote>

<p>‚Ä¶which both Spencer and Johnny correctly guessed was the <strong>compiler error</strong>, but only because they never heard of Clascal, which was in fact a real language Apple once used! Unfortunately, Clascal did not survive the entire Classic Mac OS era, which made it the false statement after all‚Ä¶ <a href="https://en.wikipedia.org/wiki/Object_Pascal">Learn More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/articles/2020/08/compositional-layouts</guid><title>Compositional Layouts and Diffable Data Sources</title><description>We discuss the new compositional layouts and diffable data sources instroduced in iOS 13, along with things to keep in mind when new APIs come along to seemingly replace older ones.</description><link>https://codecompletion.io/articles/2020/08/compositional-layouts</link><pubDate>Sun, 23 Aug 2020 18:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Compositional layouts and diffable data sources are a set of new APIs that were made available in iOS 13 (and augmented in iOS 14) that allow for better usability when presenting data in a Collection View or Table View. Although they can be quite the learning curve when coming from existing ways of managing <a href="https://developer.apple.com/documentation/uikit/uicollectionview"><code>UICollectionView</code></a>s and <a href="https://developer.apple.com/documentation/uikit/uitableview"><code>UITableView</code></a>s up until now (mostly since the new APIs require a change of mentality to truly be productive with them), they do enable simpler and more expressive code when fully embraced. That said, they do not replace any of the older techniques that are still available, but rather enhance them in ways that enable modern layouts without the same amount of custom work that would have been needed previously.</p><h2>üóÑ What is a Data Source?</h2><p>In the traditional setup for either a collection view or a table view, you have the interface element or <em>view</em> itself that presents all the entries (known as <em>cells</em>) that you see on screen, along with the data that backs up those cells. The way it used to work, you would have needed a collection of elements or <em>model objects</em> ‚Äî for instance a bunch of people in a contacts app, or menu items in a restaurant‚Äôs ordering app ‚Äî that you ultimately wanted to present on screen. This was done via a special object known as a <em>data source</em>, that was contacted by the collection or table view anytime it was ready to display more cells as the user interacted with it.</p><p>Achieved by conforming the data source to the <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdatasource"><code>UICollectionViewDataSource</code></a> or <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource"><code>UITableViewDataSource</code></a> protocols (you might even make use of the <em>delegate</em> protocols <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdelegate"><code>UICollectionViewDelegate</code></a> and <a href="https://developer.apple.com/documentation/uikit/uitableviewdelegate"><code>UITableViewDelegate</code></a> as well), this indicated that the object could "speak" the same language, or <em>protocol</em>, that the collection or table view expected. Ultimately, the collection or table view could then ask its data source to indicate how many cells there are, along with which entry should be displayed for which cell, but could also ask its delegate to perform an action when that cell was interacted with by the user. This paradigm has been available since <code>UITableView</code> and <code>UICollectionView</code> were originally introduced, and even long before iOS was even available: on the Mac.</p><p>This paradigm works well for highly regular content, but as soon as you have a lot of dynamic reorganization or a custom layout, you‚Äôll start running into problems. You may have even seen such errors: ‚Äúbefore the insertion or deletion, there were this many cells, and after the event, there were those many cells‚Äù; meanwhile the actual number that should have existed was some other third value. This is a collection or table view‚Äôs way of telling the developer something went wrong with how they managed the insertion or deletion of those cells, usually followed by a crash.</p><p>When such a thing happens in Xcode, you get a big error so you can find and fix it, but if you are a user out in the wild, the app will just close instantly, without warning. Ultimately, the solution is probably related to the order cells were added or removed, or maybe a step was forgotten; that said, the model layer and the view layer need to be in sync, and if they are not, this entire crop of issues tends to show up.</p><h2>üîÄ Diffable Data Sources</h2><p>One of the ways Apple has tried to solve this issue for developers is to take some of that work and make it the responsibility of the model to manage, using a new type of data source called a <a href="https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasource">diffable data source</a>. One of the necessary steps is to make entries both <a href="https://developer.apple.com/documentation/swift/identifiable"><code>Identifiable</code></a> and <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a>, which allows each model object to indicate if it is related to any other previous instance of the same entry (<em>Identifiable</em>), and if they are, to go one step further and see if they changed since the last time they were displayed (<em>Hashable</em>). The collection or table view can then do a much better job of knowing which model goes with which cell, and if you insert or delete them, or move and reorder them, the view can be smarter about making those changes, without the app's data source needing to do as much manual bookkeeping.</p><p>Before diffable data sources, to move a cell on screen the controller (an object coordinating the views and the model, and often was the data source itself) would have had to delete the cell from where it was, and would then create a brand new cell in a new position (using what's called an <em>index path</em>), telling the view about the change. However, if the controller didn't indicate those changes in exactly the right order, problems would crop up. Using diffable data sources allows the developer to express their interests a bit more fluidly, essentially by setting the data source to exist in a particular state, and asking it to figure out where it is now and what it will become by differentiating, or <em>diffing</em>, between the two before and after, animating those changes automatically. This is where the ‚Äúdiffable‚Äù comes from in ‚Äúdiffable data sources‚Äù.</p><h2>üì∞ Compositional Layouts</h2><p>A companion technology to diffable data sources, <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout">compositional layouts</a> allow you to create complex visual interactions between cells. For instance, in the App Store app you might sometimes notice large cards, but other times there will be a smaller table view within one of those cards, or even a section that scrolls vertically. Traditionally, this sort of layout would be very difficult to implement ‚Äî a developer might even end up embedding a <code>UITableView</code> inside a <code>UICollectionView</code>'s cell, causing the entire layout to be very difficult to manage.</p><p>With compositional layouts, an iOS developer can design their layout in a way that is not too different than styling <code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> tags in CSS, where a group of cells could be set to scroll horizontally, while others would scroll vertically (this is called <em>orthogonal scrolling</em>) ‚Äî the cells could even be configured to take up different amounts of space on screen! This allows the developer to create lots of very rich and interesting combinations of layouts that would have otherwise been tedious to implement.</p><h2>ü§ù Benefits All Around</h2><p>When using a diffable data source, the first thing you may notice is that animations between cells are now nearly automatic, because each model instance is individually hashed and indexed by the framework. This is because snapshots between the old data set and the new data set can be determined really efficiently without storing the entire model multiple times. Whenever you are ready, you can apply a new snapshot on the data source, and indicate if you want it animated or not, and like magic, everything will move to where it needs to move ‚Äî meaning if a snapshot moves a cell from one section to another, the table view will detect that and animate that movement; the same goes for deletions or insertions.</p><p>Without a diffable data source, a simple method of using collection and table views <em>was</em> available ‚Äî specifically the catch all method of <code>reloadData()</code>, which would tell the view that it should update itself and ask the data source for the most up to date representation of the entries. However, this was without any transitions or smooth animations. Not to mention, it would reload everything, even the parts that didn‚Äôt change, which could be inefficient.</p><p>Compositional layouts on the other hand, make layouts like those seen in the App Store or Netflix apps so much easier to implement, with much less code, and thus less of a headache for the developer. Combined with a diffable data source, managing this data becomes conceptually possible to revisit and maintain over time.</p><h2>üîú Where This Will Lead</h2><p>Although these are just a few of the new <code>UITableView</code> and <code>UICollectionView</code> APIs introduced with iOS 13, they are likely to make more complex and interactive layouts the standard going forward, specifically because they make them <em>less complex</em> to deal with. Unfortunately for older apps, they would need to wait until they can safely start requiring iOS 13 and newer, as these APIs were unavailable up until then.</p><p>The old APIs exist mainly because computers and phones weren‚Äôt aways as fast as they are today, so to save calculation time, the app would keep track of changes as they were being made, ultimately letting the view know about any changes once the user returned to it. Now that processors are so much faster and efficient, an app can easily burn through a few extra cycles doing this calculation after the fact, and only when needed, by using a framework-provided algorithm that is heavily optimized, and get the results in a way that is easily conveyed to the collection or table view.</p><p>If you are interested in learning more about these APIs, check out Apple‚Äôs <a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views">sample code</a> on both of these topics, which contains tons of examples of really cool screens you can make using these new technologies. The sample code was just updated for iOS 14 since WWDC was not too long ago, so be sure to have the latest beta version of Xcode 12 downloaded if you would like to play around with them.</p><h2>üß∞ Alternative Data Source Paradigms</h2><p>Somewhat curiously, the Mac has had different paradigms for representing a data source long before iOS was ever a thing. Specifically, <a href="https://developer.apple.com/documentation/appkit/nsoutlineview"><code>NSOutlineView</code></a>, a subclass of <a href="https://developer.apple.com/documentation/appkit/nstableview"><code>NSTableView</code></a>, actually asks for an array of contents for a given item, and recursively asks for the children of those items as they become necessary when a row is expanded, without dealing with many of the complexities discussed previously. The Finder, for instance, uses this paradigm to represent files and folders inside of other folders, allowing for lots of data to be shown, just not all at once. This is actually a similar design to what diffable data sources offer, so it's interesting that the model that <code>NSOutlineView</code> uses never directly made the jump to iOS, only to be re-implemented from scratch in a much improved way.</p><h2>‚ú® On the New and Shiny</h2><p>Just because these new technologies exist, however, doesn‚Äôt mean you absolutely have to use them. Together, they represent a collection of tools, some of which work better than others depending on the situations being asked of them, so it‚Äôs important to use the tool that allows you to build what you want to build. For instance, as soon as <code>UICollectionView</code> came out several years ago, a discussion immediately precipitated around the eventual demise of <code>UITableView</code>. With iOS 14‚Äôs introduction of the List type for collection views, those discussions were reignited, now that you can essentially build a table view, and more, with only a collection view.</p><p>However, it‚Äôs important to remember that these APIs represent increasingly complicated ways of representing your data. If all you need is a simple list, then there is no need to go through the extra effort of implementing that list in a <code>UICollectionView</code> if you know it‚Äôll only ever be a list ‚Äî the API will be simpler to work with, and you‚Äôll have to jump through less hoops in the process. If you do eventually want to upgrade, the paradigms between them are simple enough that the transition from <code>UITableView</code> to <code>UICollectionView</code> with the same layout should only require minimal changes.</p><p>Planning ahead of time can save you transitions in the long run. For instance, if you know that you will want to transition between different view layouts, for instance between rows of rectangles and a grid of squares, then a collection view may make for a better starting point, since you‚Äôll be targeting a specific conclusion right from the beginning.</p><p>As a side note, when collection views were released, the underlying implementation of table views was actually swapped out with a shared implementation, simply because collection views are a natural super set of table views. That said, it's important to remember that if you really wanted, you could implement the same functionality <a href="https://github.com/mochidev/MDSpreadViewDemo">completely from scratch</a>, as there is very little magic actually happening behind the scenes, just carefully crafted and optimized algorithms.</p><p>Ultimately though, if you do find yourself having written something completely from scratch only to find out Apple released a new API that supersedes it, it‚Äôs likely a good idea to move over to that API as soon as you can, as it will likely be maintained on your behalf, letting you focus on the parts of your app that make it unique, rather than working on aspects that would better fit within a framework.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-2</guid><title>Episode 2: Available in Human Sizes</title><description>We discuss the benefits of finding your niche and specializing when looking for new opportunities, and what would happen if we considered the App Store to be simply a provider, much like an ISP.</description><link>https://codecompletion.io/episodes/2020/ep-2</link><pubDate>Mon, 17 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 2! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Finding your niche and the benefits in specializing when looking for new opportunities.</li><li>How beneficial would it be to consider the App Store as simply a provider, much like an ISP.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Can you explain what is wrong with the following code, how it can break, and show how to fix it?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
</code><code><span class="splashkeyword">struct</span> Person {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span>
    <span class="splashkeyword">var</span> age: <span class="splashtype">Double</span>
}

<span class="splashkeyword">let</span> person = <span class="splashcall">askForPerson</span>()
<span class="splashtype">NSLog</span>(<span class="splashstring">"</span>\(person.<span class="splashproperty">name</span>) <span class="splashstring">is %.2f years old today!"</span>, person.<span class="splashproperty">age</span>)
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</li></ol><ol start="2"><li>Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</li></ol><ol start="3"><li>Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</li></ol><ol start="4"><li>Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben had the misfortune of going first again to show the others the ropes, followed by Fernando and Johnny. Let's check how they did!</p>

<blockquote>4. Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</blockquote>

<p>Johnny doubted this product ever existed and was the compiler error, but unfortunately it was a <em>code completion</em>! <a href="https://www.apple.com/newsroom/2006/01/10Apple-Announces-the-iPod-Radio-Remote/">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</blockquote>

<p>Fernando fumbled last minute and chose this as the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_QuickTake">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</blockquote>

<p>Everyone thought this was true, but it was in fact the <strong>compiler error</strong>, since iPod socks were not only available for sale for nearly a decade, but were unfortunately never available in human sizes‚Ä¶ <a href="https://appleinsider.com/articles/12/09/26/apple-removes-ipod-socks-from-online-store">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</blockquote>

<p>‚Ä¶which Ben thought was a bit too outlandish, was still a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_410_Color_Plotter">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Mystiko</a>. <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Mystiko on the iMessage App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-1</guid><title>Episode 1: File, New, New Project‚Ä¶</title><description>We discuss how to layout your UI using compositional layouts and diffable data sources, different ways to bring an iPhone UI to the iPad, and ways Apple could make the App Store a better place for both developers and users.</description><link>https://codecompletion.io/episodes/2020/ep-1</link><pubDate>Mon, 10 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>How to layout your UI using compositional layouts and diffable data sources.</li><li>Different ways to bring an iPhone UI to the iPad.</li><li>Ways Apple could make the App Store a better place for both developers and users.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Without using a variable as a flag, how can you skip to the next iteration of an outer loop, from inside an inner loop?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
</code><code><span class="splashkeyword">for</span> row <span class="splashkeyword">in</span> rows {
    <span class="splashkeyword">for</span> column <span class="splashkeyword">in</span> columns {
        <span class="splashkeyword">if</span> column.<span class="splashproperty">shouldSkipToNextRow</span> {
            <span class="splashcomment">// how do you get to the next row?</span>
        }
    }
    <span class="splashcall">finishUpRow</span>(row)
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Apple III.</li></ol><ol start="2"><li>Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</li></ol><ol start="3"><li>Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</li></ol><ol start="4"><li>Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben went first, followed by Spencer. Let's check how they did!</p>

<blockquote>4. Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Shift_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>3. Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</blockquote>

<p>Spencer thought this was true, while Ben thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Control_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<blockquote>2. Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</blockquote>

<p>Spencer thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Macintosh introduced in 1984, though the command key itself was present on the Apple III introduced in 1980, but it was represented by an open Apple logo instead.</blockquote>

<p>is in fact the <strong>compiler error</strong>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn&nbsp;More&nbsp;‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item></channel></rss>