<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>CodeCompletion.io</title><description>We are a group of developers and educators specializing in Apple Platform development, here to try something new.

New content coming out every Friday.</description><link>https://codecompletion.io</link><language>en</language><lastBuildDate>Sun, 23 Aug 2020 18:42:39 +0000</lastBuildDate><pubDate>Sun, 23 Aug 2020 18:42:39 +0000</pubDate><ttl>250</ttl><atom:link href="https://codecompletion.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://codecompletion.io/articles/2020/08/compositional-layouts</guid><title>Compositional Layouts and Diffable Data Sources</title><description>We discuss the new compositional layouts and diffable data sources instroduced in iOS 13, along with things to keep in mind when new APIs come along to seemingly replace older ones.</description><link>https://codecompletion.io/articles/2020/08/compositional-layouts</link><pubDate>Sun, 23 Aug 2020 18:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Compositional layouts and diffable data sources are a set of new APIs that were made available in iOS 13 (and augmented in iOS 14) that allow for better usability when presenting data in a Collection View or Table View. Although they can be quite the learning curve when coming from existing ways of managing <a href="https://developer.apple.com/documentation/uikit/uicollectionview"><code>UICollectionView</code></a>s and <a href="https://developer.apple.com/documentation/uikit/uitableview"><code>UITableView</code></a>s up until now (mostly since the new APIs require a change of mentality to truly be productive with them), they do enable simpler and more expressive code when fully embraced. That said, they do not replace any of the older techniques that are still available, but rather enhance them in ways that enable modern layouts without the same amount of custom work that would have been needed previously.</p><h2>üóÑ What is a Data Source?</h2><p>In the traditional setup for either a collection view or a table view, you have the interface element or <em>view</em> itself that presents all the entries (known as <em>cells</em>) that you see on screen, along with the data that backs up those cells. The way it used to work, you would have needed a collection of elements or <em>model objects</em> ‚Äî for instance a bunch of people in a contacts app, or menu items in a restaurant‚Äôs ordering app ‚Äî that you ultimately wanted to present on screen. This was done via a special object known as a <em>data source</em>, that was contacted by the collection or table view anytime it was ready to display more cells as the user interacted with it.</p><p>Achieved by conforming the data source to the <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdatasource"><code>UICollectionViewDataSource</code></a> or <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource"><code>UITableViewDataSource</code></a> protocols (you might even make use of the <em>delegate</em> protocols <a href="https://developer.apple.com/documentation/uikit/uicollectionviewdelegate"><code>UICollectionViewDelegate</code></a> and <a href="https://developer.apple.com/documentation/uikit/uitableviewdelegate"><code>UITableViewDelegate</code></a> as well), this indicated that the object could "speak" the same language, or <em>protocol</em>, that the collection or table view expected. Ultimately, the collection or table view could then ask its data source to indicate how many cells there are, along with which entry should be displayed for which cell, but could also ask its delegate to perform an action when that cell was interacted with by the user. This paradigm has been available since <code>UITableView</code> and <code>UICollectionView</code> were originally introduced, and even long before iOS was even available: on the Mac.</p><p>This paradigm works well for highly regular content, but as soon as you have a lot of dynamic reorganization or a custom layout, you‚Äôll start running into problems. You may have even seen such errors: ‚Äúbefore the insertion or deletion, there were this many cells, and after the event, there were those many cells‚Äù; meanwhile the actual number that should have existed was some other third value. This is a collection or table view‚Äôs way of telling the developer something went wrong with how they managed the insertion or deletion of those cells, usually followed by a crash.</p><p>When such a thing happens in Xcode, you get a big error so you can find and fix it, but if you are a user out in the wild, the app will just close instantly, without warning. Ultimately, the solution is probably related to the order cells were added or removed, or maybe a step was forgotten; that said, the model layer and the view layer need to be in sync, and if they are not, this entire crop of issues tends to show up.</p><h2>üîÄ Diffable Data Sources</h2><p>One of the ways Apple has tried to solve this issue for developers is to take some of that work and make it the responsibility of the model to manage, using a new type of data source called a <a href="https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasource">diffable data source</a>. One of the necessary steps is to make entries both <a href="https://developer.apple.com/documentation/swift/identifiable"><code>Identifiable</code></a> and <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a>, which allows each model object to indicate if it is related to any other previous instance of the same entry (<em>Identifiable</em>), and if they are, to go one step further and see if they changed since the last time they were displayed (<em>Hashable</em>). The collection or table view can then do a much better job of knowing which model goes with which cell, and if you insert or delete them, or move and reorder them, the view can be smarter about making those changes, without the app's data source needing to do as much manual bookkeeping.</p><p>Before diffable data sources, to move a cell on screen the controller (an object coordinating the views and the model, and often was the data source itself) would have had to delete the cell from where it was, and would then create a brand new cell in a new position (using what's called an <em>index path</em>), telling the view about the change. However, if the controller didn't indicate those changes in exactly the right order, problems would crop up. Using diffable data sources allows the developer to express their interests a bit more fluidly, essentially by setting the data source to exist in a particular state, and asking it to figure out where it is now and what it will become by differentiating, or <em>diffing</em>, between the two before and after, animating those changes automatically. This is where the ‚Äúdiffable‚Äù comes from in ‚Äúdiffable data sources‚Äù.</p><h2>üì∞ Compositional Layouts</h2><p>A companion technology to diffable data sources, <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout">compositional layouts</a> allow you to create complex visual interactions between cells. For instance, in the App Store app you might sometimes notice large cards, but other times there will be a smaller table view within one of those cards, or even a section that scrolls vertically. Traditionally, this sort of layout would be very difficult to implement ‚Äî a developer might even end up embedding a <code>UITableView</code> inside a <code>UICollectionView</code>'s cell, causing the entire layout to be very difficult to manage.</p><p>With compositional layouts, an iOS developer can design their layout in a way that is not too different than styling <code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> tags in CSS, where a group of cells could be set to scroll horizontally, while others would scroll vertically (this is called <em>orthogonal scrolling</em>) ‚Äî the cells could even be configured to take up different amounts of space on screen! This allows the developer to create lots of very rich and interesting combinations of layouts that would have otherwise been tedious to implement.</p><h2>ü§ù Benefits All Around</h2><p>When using a diffable data source, the first thing you may notice is that animations between cells are now nearly automatic, because each model instance is individually hashed and indexed by the framework. This is because snapshots between the old data set and the new data set can be determined really efficiently without storing the entire model multiple times. Whenever you are ready, you can apply a new snapshot on the data source, and indicate if you want it animated or not, and like magic, everything will move to where it needs to move ‚Äî meaning if a snapshot moves a cell from one section to another, the table view will detect that and animate that movement; the same goes for deletions or insertions.</p><p>Without a diffable data source, a simple method of using collection and table views <em>was</em> available ‚Äî specifically the catch all method of <code>reloadData()</code>, which would tell the view that it should update itself and ask the data source for the most up to date representation of the entries. However, this was without any transitions or smooth animations. Not to mention, it would reload everything, even the parts that didn‚Äôt change, which could be inefficient.</p><p>Compositional layouts on the other hand, make layouts like those seen in the App Store or Netflix apps so much easier to implement, with much less code, and thus less of a headache for the developer. Combined with a diffable data source, managing this data becomes conceptually possible to revisit and maintain over time.</p><h2>üîú Where This Will Lead</h2><p>Although these are just a few of the new <code>UITableView</code> and <code>UICollectionView</code> APIs introduced with iOS 13, they are likely to make more complex and interactive layouts the standard going forward, specifically because they make them <em>less complex</em> to deal with. Unfortunately for older apps, they would need to wait until they can safely start requiring iOS 13 and newer, as these APIs were unavailable up until then.</p><p>The old APIs exist mainly because computers and phones weren‚Äôt aways as fast as they are today, so to save calculation time, the app would keep track of changes as they were being made, ultimately letting the view know about any changes once the user returned to it. Now that processors are so much faster and efficient, an app can easily burn through a few extra cycles doing this calculation after the fact, and only when needed, by using a framework-provided algorithm that is heavily optimized, and get the results in a way that is easily conveyed to the collection or table view.</p><p>If you are interested in learning more about these APIs, check out Apple‚Äôs <a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views">sample code</a> on both of these topics, which contains tons of examples of really cool screens you can make using these new technologies. The sample code was just updated for iOS 14 since WWDC was not too long ago, so be sure to have the latest beta version of Xcode 12 downloaded if you would like to play around with them.</p><h2>üß∞ Alternative Data Source Paradigms</h2><p>Somewhat curiously, the Mac has had different paradigms for representing a data source long before iOS was ever a thing. Specifically, <a href="https://developer.apple.com/documentation/appkit/nsoutlineview"><code>NSOutlineView</code></a>, a subclass of <a href="https://developer.apple.com/documentation/appkit/nstableview"><code>NSTableView</code></a>, actually asks for an array of contents for a given item, and recursively asks for the children of those items as they become necessary when a row is expanded, without dealing with many of the complexities discussed previously. The Finder, for instance, uses this paradigm to represent files and folders inside of other folders, allowing for lots of data to be shown, just not all at once. This is actually a similar design to what diffable data sources offer, so it's interesting that the model that <code>NSOutlineView</code> uses never directly made the jump to iOS, only to be re-implemented from scratch in a much improved way.</p><h2>‚ú® On the New and Shiny</h2><p>Just because these new technologies exist, however, doesn‚Äôt mean you absolutely have to use them. Together, they represent a collection of tools, some of which work better than others depending on the situations being asked of them, so it‚Äôs important to use the tool that allows you to build what you want to build. For instance, as soon as <code>UICollectionView</code> came out several years ago, a discussion immediately precipitated around the eventual demise of <code>UITableView</code>. With iOS 14‚Äôs introduction of the List type for collection views, those discussions were reignited, now that you can essentially build a table view, and more, with only a collection view.</p><p>However, it‚Äôs important to remember that these APIs represent increasingly complicated ways of representing your data. If all you need is a simple list, then there is no need to go through the extra effort of implementing that list in a <code>UICollectionView</code> if you know it‚Äôll only ever be a list ‚Äî the API will be simpler to work with, and you‚Äôll have to jump through less hoops in the process. If you do eventually want to upgrade, the paradigms between them are simple enough that the transition from <code>UITableView</code> to <code>UICollectionView</code> with the same layout should only require minimal changes.</p><p>Planning ahead of time can save you transitions in the long run. For instance, if you know that you will want to transition between different view layouts, for instance between rows of rectangles and a grid of squares, then a collection view may make for a better starting point, since you‚Äôll be targeting a specific conclusion right from the beginning.</p><p>As a side note, when collection views were released, the underlying implementation of table views was actually swapped out with a shared implementation, simply because collection views are a natural super set of table views. That said, it's important to remember that if you really wanted, you could implement the same functionality <a href="https://github.com/mochidev/MDSpreadViewDemo">completely from scratch</a>, as there is very little magic actually happening behind the scenes, just carefully crafted and optimized algorithms.</p><p>Ultimately though, if you do find yourself having written something completely from scratch only to find out Apple released a new API that supersedes it, it‚Äôs likely a good idea to move over to that API as soon as you can, as it will likely be maintained on your behalf, letting you focus on the parts of your app that make it unique, rather than working on aspects that would better fit within a framework.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-2</guid><title>Episode 2: Available in Human Sizes</title><description>We discuss the benefits of finding your niche and specializing when looking for new opportunities, and what would happen if we considered the App Store to be simply a provider, much like an ISP.</description><link>https://codecompletion.io/episodes/2020/ep-2</link><pubDate>Mon, 17 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion, Episode 2! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>Finding your niche and the benefits in specializing when looking for new opportunities.</li><li>How beneficial would it be to consider the App Store as simply a provider, much like an ISP.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Can you explain what is wrong with the following code, how it can break, and show how to fix it?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
</code><code><span class="splashkeyword">struct</span> Person {
    <span class="splashkeyword">var</span> name: <span class="splashtype">String</span>
    <span class="splashkeyword">var</span> age: <span class="splashtype">Double</span>
}

<span class="splashkeyword">let</span> person = <span class="splashcall">askForPerson</span>()
<span class="splashtype">NSLog</span>(<span class="splashstring">"</span>\(person.<span class="splashproperty">name</span>) <span class="splashstring">is %.2f years old today!"</span>, person.<span class="splashproperty">age</span>)
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</li></ol><ol start="2"><li>Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</li></ol><ol start="3"><li>Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</li></ol><ol start="4"><li>Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben had the misfortune of going first again to show the others the ropes, followed by Fernando and Johnny. Let's check how they did!</p>

<blockquote>4. Released in 2006, the iPod Radio Remote was an attachment for then-new iPods that was shaped like a then-unreleased clip-style iPod Shuffle, that allowed compatible iPod users to use their iPods as an FM Radio tuner.</blockquote>

<p>Johnny doubted this product ever existed and was the compiler error, but unfortunately it was a <em>code completion</em>! <a href="https://www.apple.com/newsroom/2006/01/10Apple-Announces-the-iPod-Radio-Remote/">Learn More ‚Üí</a></p>

<blockquote>3. Known now as a feature that allows videos to be quickly taken by pressing and holding the shutter button on modern iPhones, the Apple QuickTake was a line of video cameras that could be used tethered to a Mac, or on the go thanks to AA batteries.</blockquote>

<p>Fernando fumbled last minute and chose this as the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_QuickTake">Learn More ‚Üí</a></p>

<blockquote>2. Available for sale for just a couple years, iPod Socks were a series of pouches for iPods woven like socks, and came as a package with six colors: grey, orange, pink, blue, green, and purple. For a limited time, they were also available in human sizes at the Apple Company Store in Cupertino.</blockquote>

<p>Everyone thought this was true, but it was in fact the <strong>compiler error</strong>, since iPod socks were not only available for sale for nearly a decade, but were unfortunately never available in human sizes‚Ä¶ <a href="https://appleinsider.com/articles/12/09/26/apple-removes-ipod-socks-from-online-store">Learn More ‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. A key player in pioneering the digital publishing space, Apple made several printer models in 80s and 90s such as the popular ImageWriter and LaserWriter, but they also made the Apple 410 Color Plotter, a printer that used a stylus along with a selection of inks to literally draw shapes and text on the page.</blockquote>

<p>‚Ä¶which Ben thought was a bit too outlandish, was still a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Apple_410_Color_Plotter">Learn More ‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Mystiko</a>. <a href="https://apps.apple.com/us/app/mystiko/id1148340942?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Mystiko on the iMessage App Store today to give it a try.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codecompletion.io/episodes/2020/ep-1</guid><title>Episode 1: File, New, New Project‚Ä¶</title><description>We discuss how to layout your UI using compositional layouts and diffable data sources, different ways to bring an iPhone UI to the iPad, and ways Apple could make the App Store a better place for both developers and users.</description><link>https://codecompletion.io/episodes/2020/ep-1</link><pubDate>Mon, 10 Aug 2020 15:30:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to Code Completion! We are a group of iOS developers and educators hoping to share what we love most about development, Apple technology, and completing your code on this brand new show!</p><p>Follow us <a href="https://twitter.com/CodeCompletion">@CodeCompletion</a> on Twitter to hear about our upcoming livestreams, videos, and other content.</p><p>Be sure to also sign up to our monthly newsletter, where we will recap the topics we discussed, reveal the answers to <em>#CompleteTheCode</em>, and share even more things we learned in between episodes.</p><p>You are what makes this show possible, so please be sure to share this with your friends and family who are also interested in any part of the app development process.</p><h2>‚≠êÔ∏è This Week's Topics</h2><ul><li>How to layout your UI using compositional layouts and diffable data sources.</li><li>Different ways to bring an iPhone UI to the iPad.</li><li>Ways Apple could make the App Store a better place for both developers and users.</li></ul><h2>üöß #CompleteTheCode</h2><p>This week's <em>#CompleteTheCode</em>:</p><blockquote>Without using a variable as a flag, how can you skip to the next iteration of an outer loop, from inside an inner loop?</blockquote><pre><code class="splashlineNumbers">1
2
3
4
5
6
7
8
</code><code><span class="splashkeyword">for</span> row <span class="splashkeyword">in</span> rows {
    <span class="splashkeyword">for</span> column <span class="splashkeyword">in</span> columns {
        <span class="splashkeyword">if</span> column.<span class="splashproperty">shouldSkipToNextRow</span> {
            <span class="splashcomment">// how do you get to the next row?</span>
        }
    }
    <span class="splashcall">finishUpRow</span>(row)
}
</code></pre><p>Be sure to <a href="https://twitter.com/intent/tweet?text=%23CompleteTheCode%20cc%2F%20%40CodeCompletion&original_referer=https%3A%2F%2Fcodecompletion.io">tweet us</a> with hashtag <em><a href="https://twitter.com/hashtag/CompleteTheCode">#CompleteTheCode</a></em> if you know the answer!</p><h2>‚ö†Ô∏è Compiler Error</h2><ol><li>Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Apple III.</li></ol><ol start="2"><li>Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</li></ol><ol start="3"><li>Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</li></ol><ol start="4"><li>Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</li></ol><details><summary>Compilation Results</summary><div class="details">

<p>Ben went first, followed by Spencer. Let's check how they did!</p>

<blockquote>4. Despite being used on some of the earliest computers, the shift modifier on Apple keyboards simply uses the <code>UPWARDS WHITE ARROW</code> character, an approximation of the standardized Level 2 Select key‚Äôs original symbol.</blockquote>

<p>Everyone thought this was true, and it is indeed a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Shift_key">Learn More ‚Üí</a></p>

<blockquote>3. Located between the control and command keys on the keyboard, the option key is unoriginally called <code>OPTION KEY</code> in the unicode specification, but was also known as the ‚Äúclosed apple key‚Äù on Apple II series computers.</blockquote>

<p>Spencer thought this was true, while Ben thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Control_key">Learn More ‚Üí</a></p>

<blockquote>2. Used on many systems that are very different from Macs, the control key on Mac OS differentiates itself from the competition by using the <code>UP ARROWHEAD</code> unicode character rather than the abbreviation, bar, or traditional caret notations.</blockquote>

<p>Spencer thought this was the error, but it was also a <em>code completion</em>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn More ‚Üí</a></p>

<p>Which means that‚Ä¶</p>

<blockquote>1. Known as the key with the apple logo, the command key has been represented by the unicode character known as <code>PLACE OF INTEREST SIGN</code> since the Macintosh introduced in 1984, though the command key itself was present on the Apple III introduced in 1980, but it was represented by an open Apple logo instead.</blockquote>

<p>is in fact the <strong>compiler error</strong>! <a href="https://en.wikipedia.org/wiki/Option_key">Learn More ‚Üí</a></p>

</div></details><h2>üéÅ Sponsor</h2><p>This week's episode of Code Completion is brought to you by <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Huuungry</a>. <a href="https://apps.apple.com/app/apple-store/id1448552588?pt=14724&ct=CodeCompletion1&mt=8">Click here</a> or search for Huuungry on the iOS App Store today to give it a try.</p>]]></content:encoded></item></channel></rss>